
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.LakeNiceClient=f()}})(function(){var define,module,exports;return(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const axios_1=require("axios");const wildemitter=require("wildemitter");class ApiRequest{constructor(apiRequestOptions){this.apiRequestOptions=apiRequestOptions;let self=this;let parent=apiRequestOptions.parent;this.parent=parent;this.logger=parent.logger;wildemitter.mixin(ApiRequest);}
assignOptions(requestConfig,requestOptions){let item;for(item in requestOptions){if(requestOptions.hasOwnProperty(item)){if('headers'===item){this.assignOptions(requestConfig[item],requestOptions[item]);}
else{requestConfig[item]=requestOptions[item];}}}}
request(executeText,uniqueID,requestConfig,requestOptions){let localLogger=this.logger;let localParent=this.parent;this.assignOptions(requestConfig,requestOptions);try{const requestInstance=axios_1.default.create();requestInstance.request(requestConfig).then(function(response){localParent.emit('responseAction',uniqueID,response);}).catch(function(error){if(error.response){localParent.emit('responseError',uniqueID,error.response);}
else if(error.request){localParent.emit('requestError',uniqueID,error.request);}
else{localParent.emit('error',uniqueID,error.message);}}).then(function(){localParent.emit('executed',uniqueID,'Executed Request: '+executeText);});}
catch(e){localLogger.error(uniqueID,e);}}
requestAction(executeText,uniqueID,requestConfig,requestOptions,responseAction){let localLogger=this.logger;let localParent=this.parent;this.assignOptions(requestConfig,requestOptions);try{const requestInstance=axios_1.default.create();requestInstance.request(requestConfig).then(function(response){responseAction(uniqueID,response);}).catch(function(error){if(error.response){localParent.emit('responseError',uniqueID,error.response);}
else if(error.request){localParent.emit('requestError',uniqueID,error.request);}
else{localParent.emit('error',uniqueID,error.message);}}).then(function(){localParent.emit('executed',uniqueID,'Executed Request: '+executeText);});}
catch(e){localLogger.error(uniqueID,e);}}
requestPromise(executeText,uniqueID,requestConfig,requestOptions){let localLogger=this.logger;this.assignOptions(requestConfig,requestOptions);try{const requestInstance=axios_1.default.create();return requestInstance.request(requestConfig);}
catch(e){localLogger.error(uniqueID,e);return null;}}}
exports.ApiRequest=ApiRequest;},{"axios":36,"wildemitter":64}],2:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class AddressBook{constructor(addressBookOptions){this.addressBookOptions=addressBookOptions;let self=this;let parent=addressBookOptions.parent;let uniqueID="Admin.AddressBook.";let item;let options=addressBookOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(AddressBook);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
getAsync(requestOptions){let localExecute='Get the address book list';let localUniqueID=this.uniqueID+"getAsync";let localUrl='address-books';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createAsync(requestOptions){let localExecute='Create the address book list';let localUniqueID=this.uniqueID+"createAsync";let localUrl='address-books';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
deleteAsync(addressBookId,requestOptions){let localExecute='Delete the address book list';let localUniqueID=this.uniqueID+"deleteAsync";let localUrl='address-books/'+addressBookId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
assignEntitiesAsync(addressBookId,requestOptions){let localExecute='Assign Entities to an address book';let localUniqueID=this.uniqueID+"assignEntitiesAsync";let localUrl='address-books/'+addressBookId.toString()+'/assignment';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
dynamicEntitiesAsync(addressBookId,requestOptions){let localExecute='Get entries for a dynamic address book';let localUniqueID=this.uniqueID+"dynamicEntitiesAsync";let localUrl='address-books/'+addressBookId.toString()+'/dynamic-entries';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createDynamicEntitiesAsync(addressBookId,requestOptions){let localExecute='Create entries for a dynamic address book';let localUniqueID=this.uniqueID+"createDynamicEntitiesAsync";let localUrl='address-books/'+addressBookId.toString()+'/dynamic-entries';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
deleteDynamicEntitiesAsync(addressBookId,externalId,requestOptions){let localExecute='Delete a dynamic address book entry';let localUniqueID=this.uniqueID+"deleteDynamicEntitiesAsync";let localUrl='address-books/'+addressBookId.toString()+'/dynamic-entries/'+externalId;let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
standardEntitiesAsync(addressBookId,requestOptions){let localExecute='Lists all standard address book entries for an address book';let localUniqueID=this.uniqueID+"standardEntitiesAsync";let localUrl='address-books/'+addressBookId.toString()+'/entries';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createStandardEntitiesAsync(addressBookId,requestOptions){let localExecute='Create standard address book entries';let localUniqueID=this.uniqueID+"createStandardEntitiesAsync";let localUrl='address-books/'+addressBookId.toString()+'/entries';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateStandardEntitiesAsync(addressBookId,requestOptions){let localExecute='Update standard address book entries';let localUniqueID=this.uniqueID+"updateStandardEntitiesAsync";let localUrl='address-books/'+addressBookId.toString()+'/entries';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
deleteStandardEntitiesAsync(addressBookId,addressBookEntryId,requestOptions){let localExecute='Delete a standard address book entry';let localUniqueID=this.uniqueID+"deleteStandardEntitiesAsync";let localUrl='address-books/'+addressBookId.toString()+'/entries/'+addressBookEntryId;let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentsAsync(agentId,requestOptions){let localExecute='Get address books for an agent';let localUniqueID=this.uniqueID+"getAgentsAsync";let localUrl='agents/'+agentId.toString()+'/address-books';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getCampaignsAsync(campaignId,requestOptions){let localExecute='Get address books for a campaign';let localUniqueID=this.uniqueID+"getCampaignsAsync";let localUrl='campaigns/'+campaignId.toString()+'/address-books';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSkillsAsync(skillId,requestOptions){let localExecute='Get address books for a skill';let localUniqueID=this.uniqueID+"getSkillsAsync";let localUrl='skills/'+skillId.toString()+'/address-books';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getTeamsAsync(teamId,requestOptions){let localExecute='Get address books for a team';let localUniqueID=this.uniqueID+"getTeamsAsync";let localUrl='teams/'+teamId.toString()+'/address-books';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.AddressBook=AddressBook;},{"../ApiBase":1,"wildemitter":64}],3:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const mockconsole=require("mockconsole");const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");const addressbook_1=require("./addressbook");const agents_1=require("./agents");const contacts_1=require("./contacts");const general_1=require("./general");const groups_1=require("./groups");const lists_1=require("./lists");const scheduledcallbacks_admin_1=require("./scheduledcallbacks-admin");const skills_1=require("./skills");class AdminClient{constructor(adminOptions){this.adminOptions=adminOptions;let self=this;let parent=adminOptions.parent;let item;let options=adminOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};wildemitter.mixin(AdminClient);let logger=function(){if(adminOptions.debug){return adminOptions.logger||console;}
else{return adminOptions.logger||mockconsole;}}();this.logger=logger;this.parent=parent;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
this.config.parent=self;if(this.config.debug){this.on('*',function(event,val1,val2,val3){var logger;if(self.config.logger===mockconsole){logger=console;}
else{logger=self.logger;}
logger.log('Admin Event:',event,val1,val2);});}
this.apirequest=new ApiBase_1.ApiRequest(this.config);this.addressbook=new addressbook_1.AddressBook(this.config);this.agents=new agents_1.Agents(this.config);this.contacts=new contacts_1.Contacts(this.config);this.general=new general_1.General(this.config);this.groups=new groups_1.Groups(this.config);this.lists=new lists_1.Lists(this.config);this.scheduledcallbacks=new scheduledcallbacks_admin_1.ScheduledCallbacksAdmin(this.config);this.skills=new skills_1.Skills(this.config);}
on(arg0,arg1){}
getApiRequest(){return this.apirequest;}
getAddressbook(){return this.addressbook;}
getAgents(){return this.agents;}
getContacts(){return this.contacts;}
getGeneral(){return this.general;}
getGroups(){return this.groups;}
getLists(){return this.lists;}
getScheduledCallbacks(){return this.scheduledcallbacks;}
getSkills(){return this.skills;}}
exports.AdminClient=AdminClient;},{"../ApiBase":1,"./addressbook":2,"./agents":4,"./contacts":5,"./general":6,"./groups":7,"./lists":8,"./scheduledcallbacks-admin":9,"./skills":10,"mockconsole":62,"wildemitter":64}],4:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Agents{constructor(agentsOptions){this.agentsOptions=agentsOptions;let self=this;let parent=agentsOptions.parent;let uniqueID="Admin.Agents.";let item;let options=agentsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Agents);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
getAgentsAsync(requestOptions){let localExecute='Get agents list';let localUniqueID=this.uniqueID+"getAgentsAsync";let localUrl='agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createAgentAsync(requestOptions){let localExecute='Create a new agent';let localUniqueID=this.uniqueID+"createAgentAsync";let localUrl='agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentAsync(agentId,requestOptions){let localExecute='Get agent';let localUniqueID=this.uniqueID+"getAgentAsync";let localUrl='agents/'+agentId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateAgentAsync(agentId,requestOptions){let localExecute='Update an agent';let localUniqueID=this.uniqueID+"updateAgentAsync";let localUrl='agents/'+agentId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
setAgentStateAsync(agentId,requestOptions){let localExecute='Set an agents state';let localUniqueID=this.uniqueID+"setAgentStateAsync";let localUrl='agents/'+agentId.toString()+'/state';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSkillsAssignedToAgentsAsync(requestOptions){let localExecute='Get skills assigned to all agents';let localUniqueID=this.uniqueID+"getSkillsAssignedToAgentsAsync";let localUrl='agents/skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getGroupsAgentAssignedAsync(agentId,requestOptions){let localExecute='Get a list of groups an agent is assigned';let localUniqueID=this.uniqueID+"getGroupsAgentAssignedAsync";let localUrl='agents/'+agentId.toString()+'/groups';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
removeSkillAssignedToAgentAsync(agentId,requestOptions){let localExecute='Remove skill assignments for an agent';let localUniqueID=this.uniqueID+"removeSkillAssignedToAgentAsync";let localUrl='agents/'+agentId.toString()+'/skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSkillsAssignedToAgentAsync(agentId,requestOptions){let localExecute='Get skills assigned to an agent';let localUniqueID=this.uniqueID+"getSkillsAssignedToAgentAsync";let localUrl='agents/'+agentId.toString()+'/skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
setSkillsToAgentAsync(agentId,requestOptions){let localExecute='Set skills to an agent';let localUniqueID=this.uniqueID+"setSkillsToAgentAsync";let localUrl='agents/'+agentId.toString()+'/skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
changeSkillForAgentAsync(agentId,requestOptions){let localExecute='Change skill assignments for an agent';let localUniqueID=this.uniqueID+"changeSkillForAgentAsync";let localUrl='agents/'+agentId.toString()+'/skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSkillsNotAssignedToAgentAsync(agentId,requestOptions){let localExecute='Get skills not assigned to an agent';let localUniqueID=this.uniqueID+"getSkillsNotAssignedToAgentAsync";let localUrl='agents/'+agentId.toString()+'/skills/unassigned';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentsContactsBySkillAsync(requestOptions){let localExecute='Get summary of all agents contacts by skill';let localUniqueID=this.uniqueID+"getAgentsContactsBySkillAsync";let localUrl='agents/skill-data';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentContactsBySkillAsync(agentId,requestOptions){let localExecute='Get summary of an agents contacts by skill';let localUniqueID=this.uniqueID+"getAgentContactsBySkillAsync";let localUrl='agents/'+agentId.toString()+'/skill-data';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createCustomAgentEventAsync(agentId,requestOptions){let localExecute='Creates a custom agent event';let localUniqueID=this.uniqueID+"createCustomAgentEventAsync";let localUrl='agents/'+agentId.toString()+'/custom-event';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getQuickRepliesAsync(requestOptions){let localExecute='Get a list of quick replies';let localUniqueID=this.uniqueID+"getQuickRepliesAsync";let localUrl='agents/quick-replies';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentQuickRepliesAsync(agentId,requestOptions){let localExecute='Get a list of quick replies for an agent';let localUniqueID=this.uniqueID+"getAgentQuickRepliesAsync";let localUrl='agents/'+agentId.toString()+'/quick-replies';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createAgentMessageAsync(requestOptions){let localExecute='Create an agent message';let localUniqueID=this.uniqueID+"createAgentMessageAsync";let localUrl='agents/messages';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
deleteAgentMessageAsync(messageId,requestOptions){let localExecute='Delete agent message';let localUniqueID=this.uniqueID+"deleteAgentMessageAsync";let localUrl='agents/messages/'+messageId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentMessageAsync(agentId,requestOptions){let localExecute='Get an agent message list';let localUniqueID=this.uniqueID+"getAgentMessageAsync";let localUrl='agents/'+agentId.toString()+'/messages';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentIndicatorAsync(agentId,requestOptions){let localExecute='Get an agent indicator list';let localUniqueID=this.uniqueID+"getAgentIndicatorAsync";let localUrl='agents/'+agentId.toString()+'/indicators';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
endAgentSessionAsync(agentId,requestOptions){let localExecute='Force an agent session to end';let localUniqueID=this.uniqueID+"endAgentSessionAsync";let localUrl='agents/'+agentId.toString()+'/logout';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentDialingPatternsAsync(requestOptions){let localExecute='Get agent dialing patterns';let localUniqueID=this.uniqueID+"getAgentDialingPatternsAsync";let localUrl='agent-patterns';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentStatesAsync(requestOptions){let localExecute='Get agent states';let localUniqueID=this.uniqueID+"getAgentStatesAsync";let localUrl='agents-states';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getTeamsAsync(requestOptions){let localExecute='Get list of teams';let localUniqueID=this.uniqueID+"getTeamsAsync";let localUrl='teams';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createTeamAsync(requestOptions){let localExecute='Create a team';let localUniqueID=this.uniqueID+"createTeamAsync";let localUrl='teams';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getTeamAsync(teamId,requestOptions){let localExecute='Get team';let localUniqueID=this.uniqueID+"getTeamAsync";let localUrl='teams/'+teamId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateTeamAsync(teamId,requestOptions){let localExecute='Update a team';let localUniqueID=this.uniqueID+"updateTeamAsync";let localUrl='teams/'+teamId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getTeamsAgentsAsync(requestOptions){let localExecute='Get the full list of teams including the agents on each of the teams';let localUniqueID=this.uniqueID+"getTeamsAgentsAsync";let localUrl='teams/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
removeAgentsFromTeamAsync(teamId,requestOptions){let localExecute='Remove agents from a team';let localUniqueID=this.uniqueID+"removeAgentsFromTeamAsync";let localUrl='teams/'+teamId.toString()+'/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getTeamAgentsAsync(teamId,requestOptions){let localExecute='Get the team including the agents on the team';let localUniqueID=this.uniqueID+"getTeamAgentsAsync";let localUrl='teams/'+teamId.toString()+'/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
setTeamAgentsAsync(teamId,requestOptions){let localExecute='Assign agents to a team';let localUniqueID=this.uniqueID+"setTeamAgentsAsync";let localUrl='teams/'+teamId.toString()+'/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
removeUnavailableCodesFromTeamAsync(teamId,requestOptions){let localExecute='Remove unavailable codes from a team';let localUniqueID=this.uniqueID+"removeUnavailableCodesFromTeamAsync";let localUrl='teams/'+teamId.toString()+'/unavailable-codes';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getOutstatesValidForTeamAsync(teamId,requestOptions){let localExecute='Gets all outstates that are valid for a team';let localUniqueID=this.uniqueID+"getOutstatesValidForTeamAsync";let localUrl='teams/'+teamId.toString()+'/unavailable-codes';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
setUnavailableCodesToTeamAsync(teamId,requestOptions){let localExecute='Set unavailable codes to a team';let localUniqueID=this.uniqueID+"setUnavailableCodesToTeamAsync";let localUrl='teams/'+teamId.toString()+'/unavailable-codes';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateUnavailableCodesForTeamAsync(teamId,requestOptions){let localExecute='Updates unavailable code for a team';let localUniqueID=this.uniqueID+"updateUnavailableCodesForTeamAsync";let localUrl='teams/'+teamId.toString()+'/unavailable-codes';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateUnavailableCodeAsync(unavailableCodeId,requestOptions){let localExecute='Updates an unavailable code';let localUniqueID=this.uniqueID+"updateUnavailableCodeAsync";let localUrl='unavailable-codes/'+unavailableCodeId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
setUnavailableCodeToTeamsAsync(unavailableCodeId,requestOptions){let localExecute='Assign unavailable code to teams';let localUniqueID=this.uniqueID+"setUnavailableCodeToTeamsAsync";let localUrl='unavailable-codes/'+unavailableCodeId.toString()+'/teams';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAccessKeysAsync(requestOptions){let localExecute='Get access keys';let localUniqueID=this.uniqueID+"getAccessKeysAsync";let localUrl='access-keys';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createAccessKeyAsync(requestOptions){let localExecute='Create an access key';let localUniqueID=this.uniqueID+"createAccessKeyAsync";let localUrl='access-keys';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
deleteAccessKeyAsync(accessKeyId,requestOptions){let localExecute='Delete access key';let localUniqueID=this.uniqueID+"deleteAccessKeyAsync";let localUrl='access-keys/'+accessKeyId;let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAccessKeyAsync(accessKeyId,requestOptions){let localExecute='Get access key';let localUniqueID=this.uniqueID+"getAccessKeyAsync";let localUrl='access-keys/'+accessKeyId;let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateAccessKeyAsync(accessKeyId,requestOptions){let localExecute='Update an access key';let localUniqueID=this.uniqueID+"updateAccessKeyAsync";let localUrl='access-keys/'+accessKeyId;let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PATCH',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Agents=Agents;},{"../ApiBase":1,"wildemitter":64}],5:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Contacts{constructor(contactsOptions){this.contactsOptions=contactsOptions;let self=this;let parent=contactsOptions.parent;let uniqueID="Admin.Contacts.";let item;let options=contactsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Contacts);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
getChatTranscriptAsync(contactId,requestOptions){let localExecute='Get a chat transcript';let localUniqueID=this.uniqueID+"getChatTranscriptAsync";let localUrl='contacts/'+contactId.toString()+'/chat-transcript';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getEmailTranscriptAsync(contactId,requestOptions){let localExecute='Get a email transcript';let localUniqueID=this.uniqueID+"getEmailTranscriptAsync";let localUrl='contacts/'+contactId.toString()+'/email-transcript';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getFilesAsync(contactId,requestOptions){let localExecute='Get a contacts files';let localUniqueID=this.uniqueID+"getFilesAsync";let localUrl='contacts/'+contactId.toString()+'/files';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
forceDisconnectAsync(contactId,requestOptions){let localExecute='Force a contact to be disconnected and to end';let localUniqueID=this.uniqueID+"forceDisconnectAsync";let localUrl='contacts/'+contactId.toString()+'/end';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
startMonitoringPhoneCallAsync(contactId,requestOptions){let localExecute='Starts monitoring a phone call';let localUniqueID=this.uniqueID+"startMonitoringPhoneCallAsync";let localUrl='contacts/'+contactId.toString()+'/monitor';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
startRecordingPhoneCallAsync(contactId,requestOptions){let localExecute='Starts the recording of an active phone call';let localUniqueID=this.uniqueID+"startRecordingPhoneCallAsync";let localUrl='contacts/'+contactId.toString()+'/record';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
assignTagsAsync(contactId,requestOptions){let localExecute='Assigns tags to a contact';let localUniqueID=this.uniqueID+"assignTagsAsync";let localUrl='contacts/'+contactId.toString()+'/tags';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getStatesAsync(requestOptions){let localExecute='Get a list of contact states';let localUniqueID=this.uniqueID+"getStatesAsync";let localUrl='contact-state-descriptions';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getStateAsync(contactStateId,requestOptions){let localExecute='Get a single contact state';let localUniqueID=this.uniqueID+"getStateAsync";let localUrl='contact-state-descriptions/'+contactStateId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createSignalAsync(contactId,requestOptions){let localExecute='Create a signal for a contact';let localUniqueID=this.uniqueID+"createSignalAsync";let localUrl='interactions/'+contactId.toString()+'/signal';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSMSTranscriptAsync(contactId,requestOptions){let localExecute='Get a sms transcript';let localUniqueID=this.uniqueID+"getSMSTranscriptAsync";let localUrl='contacts/'+contactId.toString()+'/sms-historical-transcript';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getPastSMSContactsAsync(requestOptions){let localExecute='Get past sms contacts';let localUniqueID=this.uniqueID+"getPastSMSContactsAsync";let localUrl='contacts/sms-historical-contacts';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Contacts=Contacts;},{"../ApiBase":1,"wildemitter":64}],6:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class General{constructor(generalOptions){this.generalOptions=generalOptions;let self=this;let parent=generalOptions.parent;let uniqueID="Admin.General.";let item;let options=generalOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(General);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
getBrandingProfileAsync(requestOptions){let localExecute='Get branding profile';let localUniqueID=this.uniqueID+"getBrandingProfileAsync";let localUrl='branding-profiles';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getBusinessUnitConfigAsync(requestOptions){let localExecute='Get business unit config';let localUniqueID=this.uniqueID+"getBusinessUnitConfigAsync";let localUrl='business-unit';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getCountriesAsync(requestOptions){let localExecute='Get countries';let localUniqueID=this.uniqueID+"getCountriesAsync";let localUrl='countries';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getStatesProvincesAsync(countryId,requestOptions){let localExecute='Get states provinces';let localUniqueID=this.uniqueID+"getStatesProvincesAsync";let localUrl='countries/'+countryId.toString()+'/states';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getDataTypesAsync(requestOptions){let localExecute='Get data types';let localUniqueID=this.uniqueID+"getDataTypesAsync";let localUrl='data-definitions/data-types';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getDispositionsAsync(requestOptions){let localExecute='Get dispositions';let localUniqueID=this.uniqueID+"getDispositionsAsync";let localUrl='dispositions';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
removeFileAsync(requestOptions){let localExecute='Remove file';let localUniqueID=this.uniqueID+"removeFileAsync";let localUrl='files';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getFileAsync(requestOptions){let localExecute='Get file';let localUniqueID=this.uniqueID+"getFileAsync";let localUrl='files';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
uploadFileAsync(requestOptions){let localExecute='Upload file';let localUniqueID=this.uniqueID+"uploadFileAsync";let localUrl='files';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
moveRenameFileAsync(requestOptions){let localExecute='Moves or renames a file';let localUniqueID=this.uniqueID+"moveRenameFileAsync";let localUrl='files';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getUnprocessedFilesAsync(requestOptions){let localExecute='Get a list of unprocessed files';let localUniqueID=this.uniqueID+"getUnprocessedFilesAsync";let localUrl='files/external';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
markFileForProcessingAsync(requestOptions){let localExecute='Marks a file to be processed';let localUniqueID=this.uniqueID+"markFileForProcessingAsync";let localUrl='files/external';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
markFileAsProcessedAsync(requestOptions){let localExecute='Marks a file as processed';let localUniqueID=this.uniqueID+"markFileAsProcessedAsync";let localUrl='files/external';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
deleteFolderAsync(requestOptions){let localExecute='Delete folder';let localUniqueID=this.uniqueID+"deleteFolderAsync";let localUrl='folders';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getDirectoriesAsync(requestOptions){let localExecute='Get a directory listing';let localUniqueID=this.uniqueID+"getDirectoriesAsync";let localUrl='folders';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getFeedbackCategoriesPrioritiesAsync(requestOptions){let localExecute='Get all feedback categories and priorities';let localUniqueID=this.uniqueID+"getFeedbackCategoriesPrioritiesAsync";let localUrl='feedback-categories-and-priorities';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getHiringSourcesAsync(requestOptions){let localExecute='Get hiring sources';let localUniqueID=this.uniqueID+"getHiringSourcesAsync";let localUrl='hiring-sources';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createHiringSourceAsync(requestOptions){let localExecute='Create a hiring source';let localUniqueID=this.uniqueID+"createHiringSourceAsync";let localUrl='hiring-sources';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getHoursOperationProfilesAsync(requestOptions){let localExecute='Get hours of operation profiles';let localUniqueID=this.uniqueID+"getHoursOperationProfilesAsync";let localUrl='hours-of-operation';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getHourOperationProfileAsync(profileId,requestOptions){let localExecute='Get an hour of operation profile';let localUniqueID=this.uniqueID+"getHourOperationProfileAsync";let localUrl='hours-of-operation/'+profileId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getLocationsAsync(requestOptions){let localExecute='Get locations';let localUniqueID=this.uniqueID+"getLocationsAsync";let localUrl='locations';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getMediaTypesAsync(requestOptions){let localExecute='Get media types';let localUniqueID=this.uniqueID+"getMediaTypesAsync";let localUrl='media-types';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getMediaTypeAsync(mediaTypeId,requestOptions){let localExecute='Get media type';let localUniqueID=this.uniqueID+"getMediaTypeAsync";let localUrl='media-types/'+mediaTypeId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getMessageTemplatesAsync(requestOptions){let localExecute='Get all message templates';let localUniqueID=this.uniqueID+"getMessageTemplatesAsync";let localUrl='message-templates';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createMessageTemplateAsync(requestOptions){let localExecute='Creates a message template';let localUniqueID=this.uniqueID+"createMessageTemplateAsync";let localUrl='message-templates';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getMessageTemplateAsync(templateId,requestOptions){let localExecute='Get message template';let localUniqueID=this.uniqueID+"getMessageTemplateAsync";let localUrl='message-templates/'+templateId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateMessageTemplateAsync(templateId,requestOptions){let localExecute='Update a message template';let localUniqueID=this.uniqueID+"updateMessageTemplateAsync";let localUrl='message-templates/'+templateId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getPermissionsAsync(requestOptions){let localExecute='Get permissions';let localUniqueID=this.uniqueID+"getPermissionsAsync";let localUrl='permissions';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentPermissionsAsync(agentId,requestOptions){let localExecute='Get permissions assigned to the agent';let localUniqueID=this.uniqueID+"getAgentPermissionsAsync";let localUrl='permissions/'+agentId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSMSPhoneCodesAsync(requestOptions){let localExecute='Get sms phone codes';let localUniqueID=this.uniqueID+"getSMSPhoneCodesAsync";let localUrl='phone-codes';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getPointsOfContactAsync(requestOptions){let localExecute='Get list of points of contact';let localUniqueID=this.uniqueID+"getPointsOfContactAsync";let localUrl='points-of-contact';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getPointOfContactAsync(pointOfContactId,requestOptions){let localExecute='Get a single point of contact';let localUniqueID=this.uniqueID+"getPointOfContactAsync";let localUrl='points-of-contact/'+pointOfContactId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSecurityProfilesAsync(requestOptions){let localExecute='Get all security profiles';let localUniqueID=this.uniqueID+"getSecurityProfilesAsync";let localUrl='security-profiles';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSecurityProfileAsync(profileId,requestOptions){let localExecute='Get a security profile';let localUniqueID=this.uniqueID+"getSecurityProfileAsync";let localUrl='security-profiles/'+profileId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getScriptsAsync(requestOptions){let localExecute='Get a list of scripts';let localUniqueID=this.uniqueID+"getScriptsAsync";let localUrl='scripts';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
startScriptAsync(scriptId,requestOptions){let localExecute='Start a script';let localUniqueID=this.uniqueID+"startScriptAsync";let localUrl='scripts/'+scriptId.toString()+'/start';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getServerTimeAsync(requestOptions){let localExecute='Get the server time in ISO 8601';let localUniqueID=this.uniqueID+"getServerTimeAsync";let localUrl='server-time';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getTagsAsync(requestOptions){let localExecute='Get a list of tags';let localUniqueID=this.uniqueID+"getTagsAsync";let localUrl='tags';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createTagAsync(requestOptions){let localExecute='Create a tag';let localUniqueID=this.uniqueID+"createTagAsync";let localUrl='tags';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getTagAsync(tagId,requestOptions){let localExecute='Get a tag';let localUniqueID=this.uniqueID+"getTagAsync";let localUrl='tags/'+tagId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateTagAsync(tagId,requestOptions){let localExecute='Update a tag';let localUniqueID=this.uniqueID+"updateTagAsync";let localUrl='tags/'+tagId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getTimeZonesAsync(requestOptions){let localExecute='Get a list of possible timezones';let localUniqueID=this.uniqueID+"getTimeZonesAsync";let localUrl='timezones';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getOutStatesForBusinessUnitAsync(requestOptions){let localExecute='Get all outstates for the current business unit';let localUniqueID=this.uniqueID+"getOutStatesForBusinessUnitAsync";let localUrl='unavailable-codes';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createHoursOperationProfileAsync(requestOptions){let localExecute='Create an hours of operation profile';let localUniqueID=this.uniqueID+"createHoursOperationProfileAsync";let localUrl='hours-of-operation';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateHoursOperationProfileAsync(profileId,requestOptions){let localExecute='Update an hours of operation profile';let localUniqueID=this.uniqueID+"updateHoursOperationProfileAsync";let localUrl='hours-of-operation/'+profileId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createPointOfContactAsync(requestOptions){let localExecute='Create a point of contact';let localUniqueID=this.uniqueID+"createPointOfContactAsync";let localUrl='points-of-contact';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updatePointOfContactAsync(pointOfContactId,requestOptions){let localExecute='Update a point of contact';let localUniqueID=this.uniqueID+"updatePointOfContactAsync";let localUrl='points-of-contact/'+pointOfContactId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createUnavailableCodeAsync(requestOptions){let localExecute='Creates an unavailable code';let localUniqueID=this.uniqueID+"createUnavailableCodeAsync";let localUrl='unavailable-codes';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getConfigurablePhoneNumbersAsync(requestOptions){let localExecute='Get a list of configurable phone number';let localUniqueID=this.uniqueID+"getConfigurablePhoneNumbersAsync";let localUrl='phone-numbers';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.General=General;},{"../ApiBase":1,"wildemitter":64}],7:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Groups{constructor(groupsOptions){this.groupsOptions=groupsOptions;let self=this;let parent=groupsOptions.parent;let uniqueID="Admin.Groups.";let item;let options=groupsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Groups);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
getAsync(requestOptions){let localExecute='Get groups';let localUniqueID=this.uniqueID+"getAsync";let localUrl='groups';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createAsync(requestOptions){let localExecute='Create groups';let localUniqueID=this.uniqueID+"createAsync";let localUrl='groups';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getConfigurationAsync(groupId,requestOptions){let localExecute='Get configuration';let localUniqueID=this.uniqueID+"getConfigurationAsync";let localUrl='groups/'+groupId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
modifyAsync(groupId,requestOptions){let localExecute='Modify groups';let localUniqueID=this.uniqueID+"modifyAsync";let localUrl='groups/'+groupId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
removeAgentsAsync(groupId,requestOptions){let localExecute='Remove agents';let localUniqueID=this.uniqueID+"removeAgentsAsync";let localUrl='groups/'+groupId.toString()+'/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentsAssignedAsync(groupId,requestOptions){let localExecute='Get agents assigned';let localUniqueID=this.uniqueID+"getAgentsAssignedAsync";let localUrl='groups/'+groupId.toString()+'/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
assignAgentsAsync(groupId,requestOptions){let localExecute='Assign agents';let localUniqueID=this.uniqueID+"assignAgentsAsync";let localUrl='groups/'+groupId.toString()+'/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Groups=Groups;},{"../ApiBase":1,"wildemitter":64}],8:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Lists{constructor(listsOptions){this.listsOptions=listsOptions;let self=this;let parent=listsOptions.parent;let uniqueID="Admin.Lists.";let item;let options=listsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Lists);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
getDoNotCallGroupsAsync(requestOptions){let localExecute='Get list of DNC groups';let localUniqueID=this.uniqueID+"getDoNotCallGroupsAsync";let localUrl='dnc-groups';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createDoNotCallGroupAsync(requestOptions){let localExecute='Create a DNC group';let localUniqueID=this.uniqueID+"createDoNotCallGroupAsync";let localUrl='dnc-groups';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getDoNotCallGroupAsync(groupId,requestOptions){let localExecute='Get a DNC group';let localUniqueID=this.uniqueID+"getDoNotCallGroupAsync";let localUrl='dnc-groups/'+groupId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateDoNotCallGroupAsync(groupId,requestOptions){let localExecute='Update a DNC group';let localUniqueID=this.uniqueID+"updateDoNotCallGroupAsync";let localUrl='dnc-groups/'+groupId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getContributingSkillsDoNotCallGroupAsync(groupId,requestOptions){let localExecute='Get contributing skills for a DNC group';let localUniqueID=this.uniqueID+"getContributingSkillsDoNotCallGroupAsync";let localUrl='dnc-groups/'+groupId.toString()+'/contributing-skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
removeContributingSkillAsync(groupId,skillId,requestOptions){let localExecute='Removes a contributing skill';let localUniqueID=this.uniqueID+"removeContributingSkillAsync";let localUrl='dnc-groups/'+groupId.toString()+'/contributing-skills/'+skillId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
assignContributingSkillAsync(groupId,skillId,requestOptions){let localExecute='Assign a contributing skill';let localUniqueID=this.uniqueID+"assignContributingSkillAsync";let localUrl='dnc-groups/'+groupId.toString()+'/contributing-skills/'+skillId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
expireRecordsDoNotCallGroupAsync(groupId,requestOptions){let localExecute='Expire records from a DNC group';let localUniqueID=this.uniqueID+"expireRecordsDoNotCallGroupAsync";let localUrl='dnc-groups/'+groupId.toString()+'/records';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getRecordsDoNotCallGroupAsync(groupId,requestOptions){let localExecute='Get records in a DNC group';let localUniqueID=this.uniqueID+"getRecordsDoNotCallGroupAsync";let localUrl='dnc-groups/'+groupId.toString()+'/records';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
addRecordsDoNotCallGroupAsync(groupId,requestOptions){let localExecute='Add records to a DNC group';let localUniqueID=this.uniqueID+"addRecordsDoNotCallGroupAsync";let localUrl='dnc-groups/'+groupId.toString()+'/records';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getScrubbedSkillsDoNotCallGroupAsync(groupId,requestOptions){let localExecute='Get scrubbed skills for a DNC group';let localUniqueID=this.uniqueID+"getScrubbedSkillsDoNotCallGroupAsync";let localUrl='dnc-groups/'+groupId.toString()+'/scrubbed-skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
removeScrubbedSkillAsync(groupId,skillId,requestOptions){let localExecute='Remove a scrubbed skill';let localUniqueID=this.uniqueID+"removeScrubbedSkillAsync";let localUrl='dnc-groups/'+groupId.toString()+'/scrubbed-skills/'+skillId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
assignScrubbedSkillAsync(groupId,skillId,requestOptions){let localExecute='Assign a scrubbed skill';let localUniqueID=this.uniqueID+"assignScrubbedSkillAsync";let localUrl='dnc-groups/'+groupId.toString()+'/scrubbed-skills/'+skillId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
searchPhoneNumberAsync(requestOptions){let localExecute='Search for a phone number';let localUniqueID=this.uniqueID+"searchPhoneNumberAsync";let localUrl='dnc-groups/search';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getCallingListsAsync(requestOptions){let localExecute='Get all calling lists';let localUniqueID=this.uniqueID+"getCallingListsAsync";let localUrl='lists/call-lists';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createCallingListMappingAsync(requestOptions){let localExecute='Create a calling list mapping';let localUniqueID=this.uniqueID+"createCallingListMappingAsync";let localUrl='lists/call-lists';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
removeCallingListAsync(listId,requestOptions){let localExecute='Remove a calling list';let localUniqueID=this.uniqueID+"removeCallingListAsync";let localUrl='lists/call-lists/'+listId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
downloadCallingListAsync(listId,requestOptions){let localExecute='Download a calling list';let localUniqueID=this.uniqueID+"downloadCallingListAsync";let localUrl='lists/call-lists/'+listId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
downloadCallingListAttemptsAsync(listId,requestOptions){let localExecute='Download a calling lists attempts';let localUniqueID=this.uniqueID+"downloadCallingListAttemptsAsync";let localUrl='lists/call-lists/'+listId.toString()+'/attempts';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
uploadRecordsCallListAsync(listId,requestOptions){let localExecute='Upload new records to a call list';let localUniqueID=this.uniqueID+"uploadRecordsCallListAsync";let localUrl='lists/call-lists/'+listId.toString()+'/upload';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getStatusCallingListUploadJobsAsync(requestOptions){let localExecute='Get the status of calling list upload jobs';let localUniqueID=this.uniqueID+"getStatusCallingListUploadJobsAsync";let localUrl='lists/call-lists/jobs';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
cancelListProcessAsync(jobId,requestOptions){let localExecute='Cancel pending processing list process';let localUniqueID=this.uniqueID+"cancelListProcessAsync";let localUrl='lists/call-lists/jobs/'+jobId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getStatusCallingListUploadJobAsync(jobId,requestOptions){let localExecute='Get the status of calling list upload job';let localUniqueID=this.uniqueID+"getStatusCallingListUploadJobAsync";let localUrl='lists/call-lists/jobs/'+jobId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Lists=Lists;},{"../ApiBase":1,"wildemitter":64}],9:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class ScheduledCallbacksAdmin{constructor(scheduledCallbacksOptions){this.scheduledCallbacksOptions=scheduledCallbacksOptions;let self=this;let parent=scheduledCallbacksOptions.parent;let uniqueID="Admin.ScheduledCallbacks.";let item;let options=scheduledCallbacksOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(ScheduledCallbacksAdmin);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
getAsync(agentId,requestOptions){let localExecute='Get scheduled callbacks for an agent';let localUniqueID=this.uniqueID+"getAsync";let localUrl='agents/'+agentId.toString()+'/scheduled-callbacks';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createAsync(requestOptions){let localExecute='Creates a scheduled callback';let localUniqueID=this.uniqueID+"createAsync";let localUrl='scheduled-callbacks';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
deleteAsync(callbackId,requestOptions){let localExecute='Deletes a scheduled callback';let localUniqueID=this.uniqueID+"deleteAsync";let localUrl='scheduled-callbacks/'+callbackId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateAsync(callbackId,requestOptions){let localExecute='Updates a scheduled callback';let localUniqueID=this.uniqueID+"updateAsync";let localUrl='scheduled-callbacks/'+callbackId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSkillCallbackAsync(skillId,requestOptions){let localExecute='Gets scheduled callbacks for a skill';let localUniqueID=this.uniqueID+"getSkillCallbackAsync";let localUrl='skills/'+skillId.toString()+'/scheduled-callbacks';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.ScheduledCallbacksAdmin=ScheduledCallbacksAdmin;},{"../ApiBase":1,"wildemitter":64}],10:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Skills{constructor(skillsOptions){this.skillsOptions=skillsOptions;let self=this;let parent=skillsOptions.parent;let uniqueID="Admin.Skills.";let item;let options=skillsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Skills);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
getCampaignsAsync(requestOptions){let localExecute='Get a list of campaigns';let localUniqueID=this.uniqueID+"getCampaignsAsync";let localUrl='campaigns';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getCampaignAsync(campaignId,requestOptions){let localExecute='Get a campaign';let localUniqueID=this.uniqueID+"getCampaignAsync";let localUrl='campaigns/'+campaignId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createDispositionAsync(requestOptions){let localExecute='Create a new disposition';let localUniqueID=this.uniqueID+"createDispositionAsync";let localUrl='dispositions';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getDispositionAsync(dispositionId,requestOptions){let localExecute='Get a disposition configuration';let localUniqueID=this.uniqueID+"getDispositionAsync";let localUrl='dispositions/'+dispositionId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
changeDispositionAsync(dispositionId,requestOptions){let localExecute='Modifies the configuration of a disposition';let localUniqueID=this.uniqueID+"changeDispositionAsync";let localUrl='dispositions/'+dispositionId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getDispositionClassificationsAsync(requestOptions){let localExecute='Get a list of disposition classifications';let localUniqueID=this.uniqueID+"getDispositionClassificationsAsync";let localUrl='dispositions/classifications';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSkillsAsync(requestOptions){let localExecute='Get skill details';let localUniqueID=this.uniqueID+"getSkillsAsync";let localUrl='skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createSkillAsync(requestOptions){let localExecute='Creates a skill';let localUniqueID=this.uniqueID+"createSkillAsync";let localUrl='skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSkillAsync(skillId,requestOptions){let localExecute='Get a skill details';let localUniqueID=this.uniqueID+"getSkillAsync";let localUrl='skills/'+skillId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateSkillAsync(skillId,requestOptions){let localExecute='Updates a skill';let localUniqueID=this.uniqueID+"updateSkillAsync";let localUrl='skills/'+skillId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getConfigurationThankYouPageAsync(skillId,requestOptions){let localExecute='Get config for thank you page';let localUniqueID=this.uniqueID+"getConfigurationThankYouPageAsync";let localUrl='skills/'+skillId.toString()+'/thank-you-page';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
startPersonalConnectionSkillAsync(skillId,requestOptions){let localExecute='Start a personal connection skill';let localUniqueID=this.uniqueID+"startPersonalConnectionSkillAsync";let localUrl='skills/'+skillId.toString()+'/start';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
stopPersonalConnectionSkillAsync(skillId,requestOptions){let localExecute='Stop a personal connection skill';let localUniqueID=this.uniqueID+"stopPersonalConnectionSkillAsync";let localUrl='skills/'+skillId.toString()+'/stop';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSkillAssignmentsAsync(requestOptions){let localExecute='Get skills assignments';let localUniqueID=this.uniqueID+"getSkillAssignmentsAsync";let localUrl='skills/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
removeSkillAssignmentAsync(skillId,requestOptions){let localExecute='Remove skill agent assignments skill';let localUniqueID=this.uniqueID+"removeSkillAssignmentAsync";let localUrl='skills/'+skillId.toString()+'/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentsAssignedToSkillAsync(skillId,requestOptions){let localExecute='Get agents assigned to a skill';let localUniqueID=this.uniqueID+"getAgentsAssignedToSkillAsync";let localUrl='skills/'+skillId.toString()+'/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
assignAgentsToSkillAsync(skillId,requestOptions){let localExecute='Assign agents to a skill';let localUniqueID=this.uniqueID+"assignAgentsToSkillAsync";let localUrl='skills/'+skillId.toString()+'/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateAgentAssignedSkillAsync(skillId,requestOptions){let localExecute='Update skill agent assignments';let localUniqueID=this.uniqueID+"updateAgentAssignedSkillAsync";let localUrl='skills/'+skillId.toString()+'/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getAgentsNotAssignedSkillAsync(skillId,requestOptions){let localExecute='Get agents that are not assigned to skill';let localUniqueID=this.uniqueID+"getAgentsNotAssignedSkillAsync";let localUrl='skills/'+skillId.toString()+'/agents/unassigned';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSummaryContactsAllSkillsAsync(requestOptions){let localExecute='Get summary of contacts for all skills';let localUniqueID=this.uniqueID+"getSummaryContactsAllSkillsAsync";let localUrl='skills/call-data';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSummaryContactsAllSkillAsync(skillId,requestOptions){let localExecute='Get summary of contacts for a skill';let localUniqueID=this.uniqueID+"getSummaryContactsAllSkillAsync";let localUrl='skills/'+skillId.toString()+'/call-data';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getSkillDispositionsAsync(skillId,requestOptions){let localExecute='Get a skills dispositions';let localUniqueID=this.uniqueID+"getSkillDispositionsAsync";let localUrl='skills/'+skillId.toString()+'/dispositions';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getUnassignedDispositionsAsync(skillId,requestOptions){let localExecute='Get unassigned dispositions for a skill';let localUniqueID=this.uniqueID+"getUnassignedDispositionsAsync";let localUrl='skills/'+skillId.toString()+'/dispositions/unassigned';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
removeTagsAsync(skillId,requestOptions){let localExecute='Removes tags from a skill';let localUniqueID=this.uniqueID+"removeTagsAsync";let localUrl='skills/'+skillId.toString()+'/tags';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getTagsAsync(skillId,requestOptions){let localExecute='Get tags for a skill';let localUniqueID=this.uniqueID+"getTagsAsync";let localUrl='skills/'+skillId.toString()+'/tags';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
assignTagAsync(skillId,requestOptions){let localExecute='Assigns a tag to a skill';let localUniqueID=this.uniqueID+"assignTagAsync";let localUrl='skills/'+skillId.toString()+'/tags';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getOutboundSkillGeneralSettingsAsync(skillId,requestOptions){let localExecute='Get outbound skill general settings';let localUniqueID=this.uniqueID+"getOutboundSkillGeneralSettingsAsync";let localUrl='skills/'+skillId.toString()+'/parameters/general-settings';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateOutboundSkillGeneralSettingsAsync(skillId,requestOptions){let localExecute='Updates outbound skill general settings';let localUniqueID=this.uniqueID+"updateOutboundSkillGeneralSettingsAsync";let localUrl='skills/'+skillId.toString()+'/parameters/general-settings';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getCPAManagementConfigurationSkillAsync(skillId,requestOptions){let localExecute='Get CPA management settings for a skill';let localUniqueID=this.uniqueID+"getCPAManagementConfigurationSkillAsync";let localUrl='skills/'+skillId.toString()+'/parameters/cpa-management';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateCPAManagementConfigurationSkillAsync(skillId,requestOptions){let localExecute='Updates CPA management configuration for a skill';let localUniqueID=this.uniqueID+"updateCPAManagementConfigurationSkillAsync";let localUrl='skills/'+skillId.toString()+'/parameters/cpa-management';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getXSConfigurationSkillAsync(skillId,requestOptions){let localExecute='Get XS configuration for a skill';let localUniqueID=this.uniqueID+"getXSConfigurationSkillAsync";let localUrl='skills/'+skillId.toString()+'/parameters/xs-settings';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateXSConfigurationSkillAsync(skillId,requestOptions){let localExecute='Updates XS settings for a skill';let localUniqueID=this.uniqueID+"updateXSConfigurationSkillAsync";let localUrl='skills/'+skillId.toString()+'/parameters/xs-settings';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getDeliveryPreferencesConfigurationSkillAsync(skillId,requestOptions){let localExecute='Get delivery preferences configuration for a skill';let localUniqueID=this.uniqueID+"getDeliveryPreferencesConfigurationSkillAsync";let localUrl='skills/'+skillId.toString()+'/parameters/delivery-preferences';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateDeliveryPreferencesConfigurationSkillAsync(skillId,requestOptions){let localExecute='Updates delivery preferences configuration for a skill';let localUniqueID=this.uniqueID+"updateDeliveryPreferencesConfigurationSkillAsync";let localUrl='skills/'+skillId.toString()+'/parameters/delivery-preferences';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getRetrySettingsSkillAsync(skillId,requestOptions){let localExecute='Get retry settings for a skill';let localUniqueID=this.uniqueID+"getRetrySettingsSkillAsync";let localUrl='skills/'+skillId.toString()+'/parameters/retry-settings';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateRetrySettingsSkillAsync(skillId,requestOptions){let localExecute='Updates retry settings for a skill';let localUniqueID=this.uniqueID+"updateRetrySettingsSkillAsync";let localUrl='skills/'+skillId.toString()+'/parameters/retry-settings';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getScheduleSettingsSkillAsync(skillId,requestOptions){let localExecute='Get schedule settings for a skill';let localUniqueID=this.uniqueID+"getScheduleSettingsSkillAsync";let localUrl='skills/'+skillId.toString()+'/parameters/schedule-settings';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateScheduleSettingsSkillAsync(skillId,requestOptions){let localExecute='Updates schedule settings for a skill';let localUniqueID=this.uniqueID+"updateScheduleSettingsSkillAsync";let localUrl='skills/'+skillId.toString()+'/parameters/schedule-settings';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createCampaignAsync(requestOptions){let localExecute='Create a campaign';let localUniqueID=this.uniqueID+"createCampaignAsync";let localUrl='campaigns';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
updateCampaignAsync(campaignId,requestOptions){let localExecute='Update a campaign';let localUniqueID=this.uniqueID+"updateCampaignAsync";let localUrl='campaigns/'+campaignId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getDispositionsSkillAssignmentAsync(requestOptions){let localExecute='Get a list of dispositions with skill assignment';let localUniqueID=this.uniqueID+"getDispositionsSkillAssignmentAsync";let localUrl='dispositions/skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
deleteCampaignSkillAsync(campaignId,requestOptions){let localExecute='Delete campaign skill';let localUniqueID=this.uniqueID+"deleteCampaignSkillAsync";let localUrl='campaigns/'+campaignId.toString()+'/skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
setCampaignSkillsAsync(campaignId,requestOptions){let localExecute='Assign campaign skills';let localUniqueID=this.uniqueID+"setCampaignSkillsAsync";let localUrl='campaigns/'+campaignId.toString()+'/skills';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Skills=Skills;},{"../ApiBase":1,"wildemitter":64}],11:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const mockconsole=require("mockconsole");const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");const agentphone_1=require("./agentphone");const chatrequests_agent_1=require("./chatrequests-agent");const emails_1=require("./emails");const personalcon_1=require("./personalcon");const phonecalls_1=require("./phonecalls");const scheduledcallbacks_agent_1=require("./scheduledcallbacks-agent");const sessions_1=require("./sessions");const supervisor_1=require("./supervisor");const voicemails_1=require("./voicemails");const workitems_1=require("./workitems");class AgentClient{constructor(agentOptions){this.agentOptions=agentOptions;let self=this;let parent=agentOptions.parent;let item;let options=agentOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};wildemitter.mixin(AgentClient);let logger=function(){if(agentOptions.debug){return agentOptions.logger||console;}
else{return agentOptions.logger||mockconsole;}}();this.logger=logger;this.parent=parent;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
this.config.parent=self;if(this.config.debug){this.on('*',function(event,val1,val2,val3){var logger;if(self.config.logger===mockconsole){logger=console;}
else{logger=self.logger;}
logger.log('Agent Event:',event,val1,val2);});}
this.apirequest=new ApiBase_1.ApiRequest(this.config);this.agentphone=new agentphone_1.AgentPhone(this.config);this.chatrequests=new chatrequests_agent_1.ChatRequestsAgent(this.config);this.emails=new emails_1.Emails(this.config);this.personalcon=new personalcon_1.PersonalCon(this.config);this.phonecalls=new phonecalls_1.PhoneCalls(this.config);this.scheduledcallbacks=new scheduledcallbacks_agent_1.ScheduledCallbacksAgent(this.config);this.sessions=new sessions_1.Sessions(this.config);this.supervisor=new supervisor_1.Supervisor(this.config);this.voicemails=new voicemails_1.Voicemails(this.config);this.workitems=new workitems_1.WorkItems(this.config);}
on(arg0,arg1){}
getApiRequest(){return this.apirequest;}
getAgentPhone(){return this.agentphone;}
getChatRequestsAgent(){return this.chatrequests;}
getEmails(){return this.emails;}
getPersonalCon(){return this.personalcon;}
getPhoneCalls(){return this.phonecalls;}
getScheduledCallbacksAgent(){return this.scheduledcallbacks;}
getSessions(){return this.sessions;}
getSupervisor(){return this.supervisor;}
getVoicemails(){return this.voicemails;}
getWorkItems(){return this.workitems;}}
exports.AgentClient=AgentClient;},{"../ApiBase":1,"./agentphone":12,"./chatrequests-agent":13,"./emails":14,"./personalcon":15,"./phonecalls":16,"./scheduledcallbacks-agent":17,"./sessions":18,"./supervisor":19,"./voicemails":20,"./workitems":21,"mockconsole":62,"wildemitter":64}],12:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class AgentPhone{constructor(agentPhoneOptions){this.agentPhoneOptions=agentPhoneOptions;let self=this;let parent=agentPhoneOptions.parent;let uniqueID="Agent.AgentPhone.";let item;let options=agentPhoneOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(AgentPhone);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
dialAgentPhoneAsync(sessionId,requestOptions){let localExecute='Dial agent phone';let localUniqueID=this.uniqueID+"dialAgentPhoneAsync";let localUrl='agent-sessions/'+sessionId+'/agent-phone/dial';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
muteAgentPhoneAsync(sessionId,requestOptions){let localExecute='Mute agent phone';let localUniqueID=this.uniqueID+"muteAgentPhoneAsync";let localUrl='agent-sessions/'+sessionId+'/agent-phone/mute';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
unMuteAgentPhoneAsync(sessionId,requestOptions){let localExecute='Un-Mute agent phone';let localUniqueID=this.uniqueID+"unMuteAgentPhoneAsync";let localUrl='agent-sessions/'+sessionId+'/agent-phone/unmute';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
endAgentPhoneCallAsync(sessionId,requestOptions){let localExecute='Ends the agents phone call';let localUniqueID=this.uniqueID+"endAgentPhoneCallAsync";let localUrl='agent-sessions/'+sessionId+'/agent-phone/end';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.AgentPhone=AgentPhone;},{"../ApiBase":1,"wildemitter":64}],13:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class ChatRequestsAgent{constructor(chatRequestsOptions){this.chatRequestsOptions=chatRequestsOptions;let self=this;let parent=chatRequestsOptions.parent;let uniqueID="Agent.ChatRequests.";let item;let options=chatRequestsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(ChatRequestsAgent);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
addChatContactAsync(sessionId,requestOptions){let localExecute='Add a chat contact';let localUniqueID=this.uniqueID+"addChatContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/add-chat';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
acceptChatContactAsync(sessionId,contactId,requestOptions){let localExecute='Accept a chat contact';let localUniqueID=this.uniqueID+"acceptChatContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/accept';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
rejectChatContactAsync(sessionId,contactId,requestOptions){let localExecute='Reject a chat contact';let localUniqueID=this.uniqueID+"rejectChatContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/reject';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
restoreChatActiveStateAsync(sessionId,contactId,requestOptions){let localExecute='Restore a chat to an active state';let localUniqueID=this.uniqueID+"restoreChatActiveStateAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/activate-chat';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
sendChatTextPatronAsync(sessionId,contactId,requestOptions){let localExecute='Send chat text to the patron';let localUniqueID=this.uniqueID+"sendChatTextPatronAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/send-chat-text';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
transferToAgentAsync(sessionId,contactId,requestOptions){let localExecute='Transfer to agent';let localUniqueID=this.uniqueID+"transferToAgentAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/transfer-chat-to-agent';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
transferToSkillAsync(sessionId,contactId,requestOptions){let localExecute='Transfer to skill';let localUniqueID=this.uniqueID+"transferToSkillAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/transfer-chat-to-skill';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
notifyPatronAgentTypingAsync(sessionId,contactId,requestOptions){let localExecute='Notify patron agent is typing';let localUniqueID=this.uniqueID+"notifyPatronAgentTypingAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/typing';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
endChatContactAsync(sessionId,contactId,requestOptions){let localExecute='End a chat contact';let localUniqueID=this.uniqueID+"endChatContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/end';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
addSMSChatContactAsync(sessionId,requestOptions){let localExecute='Add a SMS or chat contact';let localUniqueID=this.uniqueID+"addSMSChatContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/add-text';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.ChatRequestsAgent=ChatRequestsAgent;},{"../ApiBase":1,"wildemitter":64}],14:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Emails{constructor(emailsOptions){this.emailsOptions=emailsOptions;let self=this;let parent=emailsOptions.parent;let uniqueID="Agent.Emails.";let item;let options=emailsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Emails);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
addEmailContactAsync(sessionId,requestOptions){let localExecute='Add email contact';let localUniqueID=this.uniqueID+"addEmailContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/add-email';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
createsOutboundEmailContactAsync(sessionId,requestOptions){let localExecute='Creates outbound email contact';let localUniqueID=this.uniqueID+"createsOutboundEmailContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/email-outbound';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
forwardsEmailAsync(sessionId,contactId,requestOptions){let localExecute='Forwards an email';let localUniqueID=this.uniqueID+"forwardsEmailAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/email-forward';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
replyToEmailAsync(sessionId,contactId,requestOptions){let localExecute='Reply to email';let localUniqueID=this.uniqueID+"replyToEmailAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/email-reply';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
sendsEmailAsync(sessionId,contactId,requestOptions){let localExecute='Sends email';let localUniqueID=this.uniqueID+"sendsEmailAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/email-send';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
transferEmailToAgentAsync(sessionId,contactId,requestOptions){let localExecute='Transfer email to agent';let localUniqueID=this.uniqueID+"transferEmailToAgentAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/transfer-email-to-agent';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
transferEmailToSkillAsync(sessionId,contactId,requestOptions){let localExecute='Transfer email to skill';let localUniqueID=this.uniqueID+"transferEmailToSkillAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/transfer-email-to-skill';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
parksEmailAsync(sessionId,contactId,requestOptions){let localExecute='Parks email';let localUniqueID=this.uniqueID+"parksEmailAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/email-park';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
unParksEmailAsync(sessionId,contactId,requestOptions){let localExecute='Un-Parks email';let localUniqueID=this.uniqueID+"unParksEmailAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/email-unpark';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
previewEmailAsync(sessionId,contactId,requestOptions){let localExecute='Preview email';let localUniqueID=this.uniqueID+"previewEmailAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/email-preview';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
restoreEmailAsync(sessionId,contactId,requestOptions){let localExecute='Restore email';let localUniqueID=this.uniqueID+"restoreEmailAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/email-restore';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
endEmailContactAsync(sessionId,contactId,requestOptions){let localExecute='End email contact';let localUniqueID=this.uniqueID+"endEmailContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/end';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
saveDraftAsync(sessionId,contactId,requestOptions){let localExecute='Save email draft';let localUniqueID=this.uniqueID+"saveDraftAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/email-save-draft';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Emails=Emails;},{"../ApiBase":1,"wildemitter":64}],15:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class PersonalCon{constructor(personalConOptions){this.personalConOptions=personalConOptions;let self=this;let parent=personalConOptions.parent;let uniqueID="Agent.PersonalCon.";let item;let options=personalConOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(PersonalCon);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
logIntoDialerCampaignAsync(sessionId,requestOptions){let localExecute='Log into dialer campaign';let localUniqueID=this.uniqueID+"logIntoDialerCampaignAsync";let localUrl='agent-sessions/'+sessionId+'/dialer-login';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
logOutDialerCampaignAsync(sessionId,requestOptions){let localExecute='Log out dialer campaign';let localUniqueID=this.uniqueID+"logOutDialerCampaignAsync";let localUrl='agent-sessions/'+sessionId+'/dialer-logout';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
snoozePreviewContactAsync(sessionId,contactId,requestOptions){let localExecute='Snooze preview contact';let localUniqueID=this.uniqueID+"snoozePreviewContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/snooze';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.PersonalCon=PersonalCon;},{"../ApiBase":1,"wildemitter":64}],16:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class PhoneCalls{constructor(phoneCallsOptions){this.phoneCallsOptions=phoneCallsOptions;let self=this;let parent=phoneCallsOptions.parent;let uniqueID="Agent.PhoneCalls.";let item;let options=phoneCallsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(PhoneCalls);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
dialAgentPersonalQueueAsync(sessionId,requestOptions){let localExecute='Dial agent personal queue';let localUniqueID=this.uniqueID+"dialAgentPersonalQueueAsync";let localUrl='agent-sessions/'+sessionId+'/dial-agent';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
dialOutboundCallAsync(sessionId,requestOptions){let localExecute='Dial outbound call';let localUniqueID=this.uniqueID+"dialOutboundCallAsync";let localUrl='agent-sessions/'+sessionId+'/dial-phone';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
dialSkillAsync(sessionId,requestOptions){let localExecute='Dial skill';let localUniqueID=this.uniqueID+"dialSkillAsync";let localUrl='agent-sessions/'+sessionId+'/dial-skill';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
sendDtmfTonesAsync(sessionId,requestOptions){let localExecute='Send DTMF tones';let localUniqueID=this.uniqueID+"sendDtmfTonesAsync";let localUrl='agent-sessions/'+sessionId+'/send-dtmf';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
dialAgentConsultAsync(sessionId,requestOptions){let localExecute='Dial agent consult';let localUniqueID=this.uniqueID+"dialAgentConsultAsync";let localUrl='agent-sessions/'+sessionId+'/consult-agent';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
transferCallAsync(sessionId,requestOptions){let localExecute='Transfer call';let localUniqueID=this.uniqueID+"transferCallAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/transfer-calls';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
conferenceCallAsync(sessionId,requestOptions){let localExecute='Conference call';let localUniqueID=this.uniqueID+"conferenceCallAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/conference-calls';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
acceptConsultAsync(sessionId,contactId,requestOptions){let localExecute='Accept consult';let localUniqueID=this.uniqueID+"acceptConsultAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/accept-consult';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
overrideAmdCallAsync(sessionId,contactId,requestOptions){let localExecute='Override AMD call';let localUniqueID=this.uniqueID+"overrideAmdCallAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/amd-override';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
recordCallAsync(sessionId,contactId,requestOptions){let localExecute='Record call';let localUniqueID=this.uniqueID+"recordCallAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/record';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
maskRecordingAsync(sessionId,contactId,requestOptions){let localExecute='Record call';let localUniqueID=this.uniqueID+"maskRecordingAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/mask';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
stopMaskingRecordingAsync(sessionId,contactId,requestOptions){let localExecute='Stop masking recording';let localUniqueID=this.uniqueID+"stopMaskingRecordingAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/unmask';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
dialIndependentCallAsync(sessionId,contactId,requestOptions){let localExecute='Dial independent call';let localUniqueID=this.uniqueID+"dialIndependentCallAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/independent-dial';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
dispositionIndependentCallAsync(sessionId,contactId,requestOptions){let localExecute='Disposition independent call';let localUniqueID=this.uniqueID+"dispositionIndependentCallAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/independent-dial-outcome';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
placeContactOnHoldAsync(sessionId,contactId,requestOptions){let localExecute='Place contact on hold';let localUniqueID=this.uniqueID+"placeContactOnHoldAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/hold';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
resumeCallAsync(sessionId,contactId,requestOptions){let localExecute='Resume call';let localUniqueID=this.uniqueID+"resumeCallAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/resume';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
endCallAsync(sessionId,contactId,requestOptions){let localExecute='End call';let localUniqueID=this.uniqueID+"endCallAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/end';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.PhoneCalls=PhoneCalls;},{"../ApiBase":1,"wildemitter":64}],17:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class ScheduledCallbacksAgent{constructor(scheduledCallbacksOptions){this.scheduledCallbacksOptions=scheduledCallbacksOptions;let self=this;let parent=scheduledCallbacksOptions.parent;let uniqueID="Agent.ScheduledCallbacks.";let item;let options=scheduledCallbacksOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(ScheduledCallbacksAgent);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
dialAsync(sessionId,callbackId,requestOptions){let localExecute='Dial a scheduled callback';let localUniqueID=this.uniqueID+"dialAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+callbackId.toString()+'/dial';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
rescheduleAsync(sessionId,callbackId,requestOptions){let localExecute='Reschedule a scheduled callback';let localUniqueID=this.uniqueID+"rescheduleAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+callbackId.toString()+'/reschedule';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
cancelAsync(sessionId,callbackId,requestOptions){let localExecute='Cancels a presented scheduled callback';let localUniqueID=this.uniqueID+"cancelAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+callbackId.toString()+'/cancel';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.ScheduledCallbacksAgent=ScheduledCallbacksAgent;},{"../ApiBase":1,"wildemitter":64}],18:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Sessions{constructor(sessionsOptions){this.sessionsOptions=sessionsOptions;let self=this;let parent=sessionsOptions.parent;let uniqueID="Agent.Sessions.";let item;let options=sessionsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Sessions);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
startsSessionAsync(requestOptions){let localExecute='Starts session';let localUniqueID=this.uniqueID+"startsSessionAsync";let localUrl='agent-sessions';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
joinExistingSessionAsync(requestOptions){let localExecute='Join existing session';let localUniqueID=this.uniqueID+"joinExistingSessionAsync";let localUrl='agent-sessions/join';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
endSessionAsync(sessionId,requestOptions){let localExecute='End and agent session';let localUniqueID=this.uniqueID+"endSessionAsync";let localUrl='agent-sessions/'+sessionId;let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getEventDescriptionAsync(sessionId,requestOptions){let localExecute='Get event description';let localUniqueID=this.uniqueID+"getEventDescriptionAsync";let localUrl='agent-sessions/'+sessionId+'/get-next-event';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
continueReskillAsync(sessionId,requestOptions){let localExecute='Continue reskill';let localUniqueID=this.uniqueID+"continueReskillAsync";let localUrl='agent-sessions/'+sessionId+'/continue-reskill';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
dispositionContactAsync(sessionId,contactId,requestOptions){let localExecute='Disposition contact';let localUniqueID=this.uniqueID+"dispositionContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/disposition';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
setAgentStateAsync(sessionId,requestOptions){let localExecute='Set agent state';let localUniqueID=this.uniqueID+"setAgentStateAsync";let localUrl='agent-sessions/'+sessionId+'/state';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
postFeedbackAsync(sessionId,requestOptions){let localExecute='Post feedback';let localUniqueID=this.uniqueID+"postFeedbackAsync";let localUrl='agent-sessions/'+sessionId+'/submit-feedback';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
postCustomDataToContactAsync(sessionId,contactId,requestOptions){let localExecute='Post custom data to contact';let localUniqueID=this.uniqueID+"postCustomDataToContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/custom-data';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
addMediaTypeRouteAsync(sessionId,requestOptions){let localExecute='Add media type to route';let localUniqueID=this.uniqueID+"addMediaTypeRouteAsync";let localUrl='agent-sessions/'+sessionId+'/add-contact';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
moveEmailIntoFocusAsync(sessionId,contactId,requestOptions){let localExecute='Move email into focus';let localUniqueID=this.uniqueID+"moveEmailIntoFocusAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/activate';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
holdAsync(sessionId,contactId,requestOptions){let localExecute='Hold a session';let localUniqueID=this.uniqueID+"holdAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/hold';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
resumeAsync(sessionId,contactId,requestOptions){let localExecute='Resume a session';let localUniqueID=this.uniqueID+"resumeAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/resume';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
endAsync(sessionId,contactId,requestOptions){let localExecute='End a session';let localUniqueID=this.uniqueID+"endAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/end';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
acceptAsync(sessionId,contactId,requestOptions){let localExecute='Accept a session';let localUniqueID=this.uniqueID+"acceptAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/accept';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
rejectAsync(sessionId,contactId,requestOptions){let localExecute='Reject a session';let localUniqueID=this.uniqueID+"rejectAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/reject';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Sessions=Sessions;},{"../ApiBase":1,"wildemitter":64}],19:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Supervisor{constructor(supervisorOptions){this.supervisorOptions=supervisorOptions;let self=this;let parent=supervisorOptions.parent;let uniqueID="Agent.Supervisor.";let item;let options=supervisorOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Supervisor);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
monitorAgentAsync(sessionId,requestOptions){let localExecute='Monitor agent';let localUniqueID=this.uniqueID+"monitorAgentAsync";let localUrl='agent-sessions/'+sessionId+'/monitor';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
coachAgentAsync(sessionId,requestOptions){let localExecute='Coach agent';let localUniqueID=this.uniqueID+"coachAgentAsync";let localUrl='agent-sessions/'+sessionId+'/coach';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
bargeOnAgentAsync(sessionId,requestOptions){let localExecute='Barge on agent';let localUniqueID=this.uniqueID+"bargeOnAgentAsync";let localUrl='agent-sessions/'+sessionId+'/barge';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
takeOverAgentAsync(sessionId,requestOptions){let localExecute='Take over agent';let localUniqueID=this.uniqueID+"takeOverAgentAsync";let localUrl='agent-sessions/'+sessionId+'/take-over';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Supervisor=Supervisor;},{"../ApiBase":1,"wildemitter":64}],20:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Voicemails{constructor(voicemailsOptions){this.voicemailsOptions=voicemailsOptions;let self=this;let parent=voicemailsOptions.parent;let uniqueID="Agent.Voicemails.";let item;let options=voicemailsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Voicemails);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
endVoicemailContactAsync(sessionId,contactId,requestOptions){let localExecute='End a voicemail contact';let localUniqueID=this.uniqueID+"endVoicemailContactAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/end';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
playVoicemailAsync(sessionId,contactId,requestOptions){let localExecute='Play a voicemail';let localUniqueID=this.uniqueID+"playVoicemailAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/play-voicemail';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
pauseVoicemailAsync(sessionId,contactId,requestOptions){let localExecute='Pause a voicemail';let localUniqueID=this.uniqueID+"pauseVoicemailAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/pause-voicemail';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
transferVoicemailToAgentAsync(sessionId,contactId,requestOptions){let localExecute='Transfer voicemail to an agent';let localUniqueID=this.uniqueID+"transferVoicemailToAgentAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/transfer-voicemail-to-agent';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
transferVoicemailToSkillAsync(sessionId,contactId,requestOptions){let localExecute='Transfer voicemail to a skill';let localUniqueID=this.uniqueID+"transferVoicemailToSkillAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/transfer-voicemail-to-skill';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Voicemails=Voicemails;},{"../ApiBase":1,"wildemitter":64}],21:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class WorkItems{constructor(workItemsOptions){this.workItemsOptions=workItemsOptions;let self=this;let parent=workItemsOptions.parent;let uniqueID="Agent.WorkItems.";let item;let options=workItemsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(WorkItems);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
holdAsync(sessionId,contactId,requestOptions){let localExecute='Hold a work item';let localUniqueID=this.uniqueID+"holdAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/hold';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
resumeAsync(sessionId,contactId,requestOptions){let localExecute='Resume a work item';let localUniqueID=this.uniqueID+"resumeAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/resume';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
endAsync(sessionId,contactId,requestOptions){let localExecute='End a work item';let localUniqueID=this.uniqueID+"endAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/end';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
acceptAsync(sessionId,contactId,requestOptions){let localExecute='Accept a work item';let localUniqueID=this.uniqueID+"acceptAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/accept';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
rejectAsync(sessionId,contactId,requestOptions){let localExecute='Reject a work item';let localUniqueID=this.uniqueID+"rejectAsync";let localUrl='agent-sessions/'+sessionId+'/interactions/'+contactId.toString()+'/reject';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.WorkItems=WorkItems;},{"../ApiBase":1,"wildemitter":64}],22:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Authenticate{constructor(authenticateOptions){this.authenticateOptions=authenticateOptions;let self=this;let parent=authenticateOptions.parent;let uniqueID="Authentication.Authenticate.";let item;let options=authenticateOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Authenticate);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
resetAgentPasswordAsync(agentId,requestOptions){let localExecute='Resets an agents password';let localUniqueID=this.uniqueID+"resetAgentPasswordAsync";let localUrl='agents/'+agentId.toString()+'/reset-password';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
changeAgentPasswordAsync(requestOptions){let localExecute='Changes an agents password';let localUniqueID=this.uniqueID+"changeAgentPasswordAsync";let localUrl='agents/change-password';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'PUT',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Authenticate=Authenticate;},{"../ApiBase":1,"wildemitter":64}],23:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const mockconsole=require("mockconsole");const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");const authenticate_1=require("./authenticate");class AuthenticationClient{constructor(authenticationOptions){this.authenticationOptions=authenticationOptions;let self=this;let parent=authenticationOptions.parent;let item;let options=authenticationOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};wildemitter.mixin(AuthenticationClient);let logger=function(){if(authenticationOptions.debug){return authenticationOptions.logger||console;}
else{return authenticationOptions.logger||mockconsole;}}();this.logger=logger;this.parent=parent;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
this.config.parent=self;if(this.config.debug){this.on('*',function(event,val1,val2,val3){var logger;if(self.config.logger===mockconsole){logger=console;}
else{logger=self.logger;}
logger.log('Authentication Event:',event,val1,val2);});}
this.apirequest=new ApiBase_1.ApiRequest(this.config);this.authenticate=new authenticate_1.Authenticate(this.config);}
on(arg0,arg1){}
getApiRequest(){return this.apirequest;}
getAuthenticate(){return this.authenticate;}}
exports.AuthenticationClient=AuthenticationClient;},{"../ApiBase":1,"./authenticate":22,"mockconsole":62,"wildemitter":64}],24:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const mockconsole=require("mockconsole");const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");const sample_1=require("./sample");class CustomClient{constructor(customOptions){this.customOptions=customOptions;let self=this;let parent=customOptions.parent;let item;let options=customOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};wildemitter.mixin(CustomClient);let logger=function(){if(customOptions.debug){return customOptions.logger||console;}
else{return customOptions.logger||mockconsole;}}();this.logger=logger;this.parent=parent;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
this.config.parent=self;if(this.config.debug){this.on('*',function(event,val1,val2,val3){var logger;if(self.config.logger===mockconsole){logger=console;}
else{logger=self.logger;}
logger.log('Custom Event:',event,val1,val2);});}
this.apirequest=new ApiBase_1.ApiRequest(this.config);this.sample=new sample_1.Sample(this.config);}
on(arg0,arg1){}
getApiRequest(){return this.apirequest;}
getSample(){return this.sample;}}
exports.CustomClient=CustomClient;},{"../ApiBase":1,"./sample":25,"mockconsole":62,"wildemitter":64}],25:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Sample{constructor(sampleOptions){this.sampleOptions=sampleOptions;let self=this;let parent=sampleOptions.parent;let uniqueID="Custom.Sample.";let item;let options=sampleOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Sample);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
sampleMethodNameAsync(requestOptions){let localExecute='Get the sample method name';let localUniqueID=this.uniqueID+"sampleMethodNameAsync";let localUrl='agents/states';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Sample=Sample;},{"../ApiBase":1,"wildemitter":64}],26:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Callback{constructor(callbackOptions){this.callbackOptions=callbackOptions;let self=this;let parent=callbackOptions.parent;let uniqueID="Patron.Callback.";let item;let options=callbackOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Callback);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
requestImmediateCallbackAsync(requestOptions){let localExecute='Request an immediate callback';let localUniqueID=this.uniqueID+"requestImmediateCallbackAsync";let localUrl='queuecallback';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
scheduleCallbackAsync(requestOptions){let localExecute='Schedule a callback';let localUniqueID=this.uniqueID+"scheduleCallbackAsync";let localUrl='promise';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Callback=Callback;},{"../ApiBase":1,"wildemitter":64}],27:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class ChatRequestsPatron{constructor(chatRequestsOptions){this.chatRequestsOptions=chatRequestsOptions;let self=this;let parent=chatRequestsOptions.parent;let uniqueID="Patron.ChatRequests.";let item;let options=chatRequestsOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(ChatRequestsPatron);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
startsChatSessionAsync(requestOptions){let localExecute='Starts a chat session';let localUniqueID=this.uniqueID+"startsChatSessionAsync";let localUrl='contacts/chats';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
endsActiveChatSessionAsync(chatSession,requestOptions){let localExecute='Ends an active chat session';let localUniqueID=this.uniqueID+"endsActiveChatSessionAsync";let localUrl='contacts/chats/'+chatSession;let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'DELETE',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
getsInboundChatActiveChatSessionAsync(chatSession,requestOptions){let localExecute='Gets any inbound chat text from an active chat session';let localUniqueID=this.uniqueID+"getsInboundChatActiveChatSessionAsync";let localUrl='contacts/chats/'+chatSession;let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
sendsTextMembersChatSessionAsync(chatSession,requestOptions){let localExecute='Sends text to members of the chat session';let localUniqueID=this.uniqueID+"sendsTextMembersChatSessionAsync";let localUrl='contacts/chats/'+chatSession+'/send-text';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
notifyAgentPatronTypingAsync(chatSession,requestOptions){let localExecute='Notify agent patron is typing';let localUniqueID=this.uniqueID+"notifyAgentPatronTypingAsync";let localUrl='contacts/chats/'+chatSession+'/typing';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
sendsAgentChatPreviewAsync(chatSession,requestOptions){let localExecute='Sends agent a chat preview';let localUniqueID=this.uniqueID+"sendsAgentChatPreviewAsync";let localUrl='contacts/chats/'+chatSession+'/typing-preview';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
sendsChatTranscriptEmailAsync(requestOptions){let localExecute='Sends chat transcript via email';let localUniqueID=this.uniqueID+"sendsChatTranscriptEmailAsync";let localUrl='contacts/chats/send-email';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
chatProfileConfigAsync(pointsOfContactId,requestOptions){let localExecute='Gets chat profile config';let localUniqueID=this.uniqueID+"chatProfileConfigAsync";let localUrl='points-of-contact/'+pointsOfContactId.toString()+'/chat-profile';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.ChatRequestsPatron=ChatRequestsPatron;},{"../ApiBase":1,"wildemitter":64}],28:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const mockconsole=require("mockconsole");const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");const callback_1=require("./callback");const chatrequests_patron_1=require("./chatrequests-patron");const workitem_1=require("./workitem");class PatronClient{constructor(patronOptions){this.patronOptions=patronOptions;let self=this;let parent=patronOptions.parent;let item;let options=patronOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};wildemitter.mixin(PatronClient);let logger=function(){if(patronOptions.debug){return patronOptions.logger||console;}
else{return patronOptions.logger||mockconsole;}}();this.logger=logger;this.parent=parent;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
this.config.parent=self;if(this.config.debug){this.on('*',function(event,val1,val2,val3){var logger;if(self.config.logger===mockconsole){logger=console;}
else{logger=self.logger;}
logger.log('Patron Event:',event,val1,val2);});}
this.apirequest=new ApiBase_1.ApiRequest(this.config);this.callback=new callback_1.Callback(this.config);this.chatrequests=new chatrequests_patron_1.ChatRequestsPatron(this.config);this.workitem=new workitem_1.WorkItem(this.config);}
on(arg0,arg1){}
getApiRequest(){return this.apirequest;}
getCallback(){return this.callback;}
getChatRequests(){return this.chatrequests;}
getWorkItem(){return this.workitem;}}
exports.PatronClient=PatronClient;},{"../ApiBase":1,"./callback":26,"./chatrequests-patron":27,"./workitem":29,"mockconsole":62,"wildemitter":64}],29:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class WorkItem{constructor(workItemOptions){this.workItemOptions=workItemOptions;let self=this;let parent=workItemOptions.parent;let uniqueID="Patron.WorkItem.";let item;let options=workItemOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(WorkItem);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
createWorkItemAsync(requestOptions){let localExecute='Create a new work item';let localUniqueID=this.uniqueID+"createWorkItemAsync";let localUrl='interactions/work-items';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.WorkItem=WorkItem;},{"../ApiBase":1,"wildemitter":64}],30:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class RealTime{constructor(realTimeOptions){this.realTimeOptions=realTimeOptions;let self=this;let parent=realTimeOptions.parent;let uniqueID="RealTimeData.RealTime.";let item;let options=realTimeOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(RealTime);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
stateAllAgentsAsync(requestOptions){let localExecute='Gets the current state for all agents';let localUniqueID=this.uniqueID+"stateAllAgentsAsync";let localUrl='agents/states';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
stateAgentAsync(agentId,requestOptions){let localExecute='Gets the current state for an agent';let localUniqueID=this.uniqueID+"stateAgentAsync";let localUrl='agents/'+agentId.toString()+'/states';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
activeContactsAsync(requestOptions){let localExecute='Gets active contacts';let localUniqueID=this.uniqueID+"activeContactsAsync";let localUrl='contacts/active';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
parkedContactsAsync(requestOptions){let localExecute='Gets parked contacts';let localUniqueID=this.uniqueID+"parkedContactsAsync";let localUrl='contacts/parked';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
activeContactStatesAsync(requestOptions){let localExecute='Gets active Contact states';let localUniqueID=this.uniqueID+"activeContactStatesAsync";let localUrl='contacts/states';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
activityAllSkillsAsync(requestOptions){let localExecute='Gets activity for all skills';let localUniqueID=this.uniqueID+"activityAllSkillsAsync";let localUrl='skills/activity';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
activitySkillAsync(skillId,requestOptions){let localExecute='Gets activity for a skill';let localUniqueID=this.uniqueID+"activitySkillAsync";let localUrl='skills/'+skillId.toString()+'/activity';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.RealTime=RealTime;},{"../ApiBase":1,"wildemitter":64}],31:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const mockconsole=require("mockconsole");const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");const realtime_1=require("./realtime");class RealTimeDataClient{constructor(realTimeDataClientOptions){this.realTimeDataClientOptions=realTimeDataClientOptions;let self=this;let parent=realTimeDataClientOptions.parent;let item;let options=realTimeDataClientOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};wildemitter.mixin(RealTimeDataClient);let logger=function(){if(realTimeDataClientOptions.debug){return realTimeDataClientOptions.logger||console;}
else{return realTimeDataClientOptions.logger||mockconsole;}}();this.logger=logger;this.parent=parent;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
this.config.parent=self;if(this.config.debug){this.on('*',function(event,val1,val2,val3){var logger;if(self.config.logger===mockconsole){logger=console;}
else{logger=self.logger;}
logger.log('RealTimeData Event:',event,val1,val2);});}
this.apirequest=new ApiBase_1.ApiRequest(this.config);this.realtime=new realtime_1.RealTime(this.config);}
on(arg0,arg1){}
getApiRequest(){return this.apirequest;}
getRealTime(){return this.realtime;}}
exports.RealTimeDataClient=RealTimeDataClient;},{"../ApiBase":1,"./realtime":30,"mockconsole":62,"wildemitter":64}],32:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class Reporting{constructor(reportingOptions){this.reportingOptions=reportingOptions;let self=this;let parent=reportingOptions.parent;let uniqueID="Reporting.Reporting.";let item;let options=reportingOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(Reporting);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
contactHistoryAsync(agentId,requestOptions){let localExecute='Gets contact history for an agent';let localUniqueID=this.uniqueID+"contactHistoryAsync";let localUrl='agents/'+agentId.toString()+'/interaction-history';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
recentContactsAsync(agentId,requestOptions){let localExecute='Gets info on recent contacts';let localUniqueID=this.uniqueID+"recentContactsAsync";let localUrl='agents/'+agentId.toString()+'/interaction-recent';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
agentLoginHistoryAsync(agentId,requestOptions){let localExecute='Gets agent login history contacts';let localUniqueID=this.uniqueID+"agentLoginHistoryAsync";let localUrl='agents/'+agentId.toString()+'/login-history';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
stateDurationAsync(agentId,requestOptions){let localExecute='Gets state duration for an agent';let localUniqueID=this.uniqueID+"stateDurationAsync";let localUrl='agents/'+agentId.toString()+'/state-history';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
performanceSummaryAllAsync(requestOptions){let localExecute='Gets a performance summary of all agents';let localUniqueID=this.uniqueID+"performanceSummaryAllAsync";let localUrl='agents/performance';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
performanceSummaryAsync(agentId,requestOptions){let localExecute='Gets a performance summary of an agent';let localUniqueID=this.uniqueID+"performanceSummaryAsync";let localUrl='agents/'+agentId.toString()+'/performance';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
contactDetailsAsync(contactId,requestOptions){let localExecute='Gets contact details';let localUniqueID=this.uniqueID+"contactDetailsAsync";let localUrl='contacts/'+contactId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
smsTranscriptsAsync(requestOptions){let localExecute='Gets SMS transcripts for a date range and transport code';let localUniqueID=this.uniqueID+"smsTranscriptsAsync";let localUrl='contacts/sms-transcripts';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
smsContactTranscriptsAsync(contactId,requestOptions){let localExecute='Gets SMS transcripts for a contactId code';let localUniqueID=this.uniqueID+"smsContactTranscriptsAsync";let localUrl='contacts/'+contactId.toString()+'/sms-transcripts';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
completedContactsAsync(requestOptions){let localExecute='Gets completed contacts';let localUniqueID=this.uniqueID+"completedContactsAsync";let localUrl='contacts/completed';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
contactCallQualityAsync(contactId,requestOptions){let localExecute='Gets contact call quality';let localUniqueID=this.uniqueID+"contactCallQualityAsync";let localUrl='contacts/'+contactId.toString()+'/call-quality';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
contactStateHistoryAsync(contactId,requestOptions){let localExecute='Gets contact state history';let localUniqueID=this.uniqueID+"contactStateHistoryAsync";let localUrl='contacts/'+contactId.toString()+'/statehistory';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
contactCustomDataAsync(contactId,requestOptions){let localExecute='Gets contact custom data';let localUniqueID=this.uniqueID+"contactCustomDataAsync";let localUrl='contacts/'+contactId.toString()+'/custom-data';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
statisticsForAllSkillsAsync(requestOptions){let localExecute='Gets statistics for all skills';let localUniqueID=this.uniqueID+"statisticsForAllSkillsAsync";let localUrl='skills/summary';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
statisticsForASkillAsync(skillId,requestOptions){let localExecute='Gets contact custom data';let localUniqueID=this.uniqueID+"statisticsForASkillAsync";let localUrl='skills/'+skillId.toString()+'/summary';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
slaSummaryForAllSkillsAsync(requestOptions){let localExecute='Gets SLA summary for all skills';let localUniqueID=this.uniqueID+"slaSummaryForAllSkillsAsync";let localUrl='skills/sla-summary';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
slaSummaryForASkillAsync(skillId,requestOptions){let localExecute='Gets SLA summary for a skill';let localUniqueID=this.uniqueID+"slaSummaryForASkillAsync";let localUrl='skills/'+skillId.toString()+'/sla-summary';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
performanceSummaryOfAllTeamsAsync(requestOptions){let localExecute='Gets performance summary of all teams';let localUniqueID=this.uniqueID+"performanceSummaryOfAllTeamsAsync";let localUrl='teams/performance-total';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
performanceSummaryOfATeamAsync(teamId,requestOptions){let localExecute='Gets performance summary of a team';let localUniqueID=this.uniqueID+"performanceSummaryOfATeamAsync";let localUrl='teams/'+teamId.toString()+'/performance-total';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
listCustomReportsAsync(requestOptions){let localExecute='Gets a list of custom reports';let localUniqueID=this.uniqueID+"listCustomReportsAsync";let localUrl='reports';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
listReportingJobsAsync(requestOptions){let localExecute='Gets a list of reporting jobs';let localUniqueID=this.uniqueID+"listReportingJobsAsync";let localUrl='report-jobs';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
reportingJobAsync(jobId,requestOptions){let localExecute='Gets a reporting job';let localUniqueID=this.uniqueID+"reportingJobAsync";let localUrl='report-jobs/'+jobId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
startCustomReportingJobAsync(reportId,requestOptions){let localExecute='Start a custom reporting job';let localUniqueID=this.uniqueID+"startCustomReportingJobAsync";let localUrl='report-jobs/'+reportId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
generatesLinkToDatadownloadReportAsync(reportId,requestOptions){let localExecute='Generates a link to a datadownload report';let localUniqueID=this.uniqueID+"generatesLinkToDatadownloadReportAsync";let localUrl='report-jobs/datadownload/'+reportId.toString();let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'POST',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/json'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.Reporting=Reporting;},{"../ApiBase":1,"wildemitter":64}],33:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const mockconsole=require("mockconsole");const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");const reporting_1=require("./reporting");const wfmdata_1=require("./wfmdata");class ReportingClient{constructor(reportingClientOptions){this.reportingClientOptions=reportingClientOptions;let self=this;let parent=reportingClientOptions.parent;let item;let options=reportingClientOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};wildemitter.mixin(ReportingClient);let logger=function(){if(reportingClientOptions.debug){return reportingClientOptions.logger||console;}
else{return reportingClientOptions.logger||mockconsole;}}();this.logger=logger;this.parent=parent;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
this.config.parent=self;if(this.config.debug){this.on('*',function(event,val1,val2,val3){var logger;if(self.config.logger===mockconsole){logger=console;}
else{logger=self.logger;}
logger.log('Reporting Event:',event,val1,val2);});}
this.apirequest=new ApiBase_1.ApiRequest(this.config);this.reporting=new reporting_1.Reporting(this.config);this.wfmdata=new wfmdata_1.WFMData(this.config);}
on(arg0,arg1){}
getApiRequest(){return this.apirequest;}
getReporting(){return this.reporting;}
getWFMData(){return this.wfmdata;}}
exports.ReportingClient=ReportingClient;},{"../ApiBase":1,"./reporting":32,"./wfmdata":34,"mockconsole":62,"wildemitter":64}],34:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const wildemitter=require("wildemitter");const ApiBase_1=require("../ApiBase");class WFMData{constructor(wfmDataOptions){this.wfmDataOptions=wfmDataOptions;let self=this;let parent=wfmDataOptions.parent;let uniqueID="Reporting.WFMData.";let item;let options=wfmDataOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0};this.parent=parent;this.logger=parent.logger;this.uniqueID=uniqueID;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(WFMData);this.apirequest=new ApiBase_1.ApiRequest(this.config);}
contactStatisticsAsync(requestOptions){let localExecute='Gets contact statistics for WFM';let localUniqueID=this.uniqueID+"contactStatisticsAsync";let localUrl='wfm-data/skills/contacts';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
agentMetadataAsync(requestOptions){let localExecute='Gets agent metadata';let localUniqueID=this.uniqueID+"agentMetadataAsync";let localUrl='wfm-data/agents';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
dailerContactStatisticsAsync(requestOptions){let localExecute='Gets dailer contact statistics';let localUniqueID=this.uniqueID+"dailerContactStatisticsAsync";let localUrl='wfm-data/skills/dialer-contacts';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
adherenceStatisticsAsync(requestOptions){let localExecute='Gets adherence statistics';let localUniqueID=this.uniqueID+"adherenceStatisticsAsync";let localUrl='wfm-data/agents/schedule-adherence';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
scorecardStatisticsAsync(requestOptions){let localExecute='Gets scorecard statistics';let localUniqueID=this.uniqueID+"scorecardStatisticsAsync";let localUrl='wfm-data/agents/scorecards';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}
agentPerformanceAsync(requestOptions){let localExecute='Gets agent performance';let localUniqueID=this.uniqueID+"agentPerformanceAsync";let localUrl='wfm-data/skills/agent-performance';let localTimeout=this.config.timeout;let options=requestOptions||{};let requestConfig={url:localUrl,method:'GET',baseURL:this.config.domainURIPath+this.config.baseURIPath,headers:{'Authorization':this.config.authorization,'Content-Type':'application/x-www-form-urlencoded'},timeout:localTimeout};this.apirequest.request(localExecute,localUniqueID,requestConfig,options);}}
exports.WFMData=WFMData;},{"../ApiBase":1,"wildemitter":64}],35:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});const mockconsole=require("mockconsole");const wildemitter=require("wildemitter");const adminclient_1=require("../api/admin/adminclient");const agentclient_1=require("../api/agent/agentclient");const authenticationclient_1=require("../api/authentication/authenticationclient");const customclient_1=require("../api/custom/customclient");const patronclient_1=require("../api/patron/patronclient");const realtimedataclient_1=require("../api/realtimedata/realtimedataclient");const reportingclient_1=require("../api/reporting/reportingclient");class LakeNiceClient{constructor(clientOptions){this.clientOptions=clientOptions;let self=this;let item;let options=clientOptions||{};let config=this.config={debug:false,domainURIPath:"https://api-a32.nice-incontact.com/inContactAPI",baseURIPath:"/services/v15.0/",authorization:"Bearer [Token Value]",timeout:0,parent:self};let logger=function(){if(clientOptions.debug){return clientOptions.logger||console;}
else{return clientOptions.logger||mockconsole;}}();this.logger=logger;for(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}
wildemitter.mixin(LakeNiceClient);if(this.config.debug){this.on('*',this.logger.log.bind(this.logger,'Lake Nice Client Event:'));}
this.adminclient=new adminclient_1.AdminClient(this.config);this.agentclient=new agentclient_1.AgentClient(this.config);this.authenticationclient=new authenticationclient_1.AuthenticationClient(this.config);this.customclient=new customclient_1.CustomClient(this.config);this.patronclient=new patronclient_1.PatronClient(this.config);this.realtimedataclient=new realtimedataclient_1.RealTimeDataClient(this.config);this.reportingclient=new reportingclient_1.ReportingClient(this.config);this.adminclient.on('*',function(){this.emit.apply(self,arguments);});this.adminclient.on('error',function(uniqueID,arg){var argum={error:true,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.adminclient.on('requestError',function(uniqueID,arg){var argum={error:true,type:'request',uniqueID:uniqueID,baseURL:arg.baseURL,url:arg.url,data:arg.data,method:arg.method,params:arg.params,headers:arg.headers};this.emit('request',argum);});this.adminclient.on('responseError',function(uniqueID,arg){var argum={error:true,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,request:arg.request};this.emit('response',argum);});this.adminclient.on('responseAction',function(uniqueID,arg){var argum={error:false,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,headers:arg.headers,config:arg.config,request:arg.request};this.emit('response',argum);});this.adminclient.on('executed',function(uniqueID,arg){var argum={error:false,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.agentclient.on('*',function(){this.emit.apply(self,arguments);});this.agentclient.on('error',function(uniqueID,arg){var argum={error:true,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.agentclient.on('requestError',function(uniqueID,arg){var argum={error:true,type:'request',uniqueID:uniqueID,baseURL:arg.baseURL,url:arg.url,data:arg.data,method:arg.method,params:arg.params,headers:arg.headers};this.emit('request',argum);});this.agentclient.on('responseError',function(uniqueID,arg){var argum={error:true,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,request:arg.request};this.emit('response',argum);});this.agentclient.on('responseAction',function(uniqueID,arg){var argum={error:false,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,headers:arg.headers,config:arg.config,request:arg.request};this.emit('response',argum);});this.agentclient.on('executed',function(uniqueID,arg){var argum={error:false,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.authenticationclient.on('*',function(){this.emit.apply(self,arguments);});this.authenticationclient.on('error',function(uniqueID,arg){var argum={error:true,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.authenticationclient.on('requestError',function(uniqueID,arg){var argum={error:true,type:'request',uniqueID:uniqueID,baseURL:arg.baseURL,url:arg.url,data:arg.data,method:arg.method,params:arg.params,headers:arg.headers};this.emit('request',argum);});this.authenticationclient.on('responseError',function(uniqueID,arg){var argum={error:true,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,request:arg.request};this.emit('response',argum);});this.authenticationclient.on('responseAction',function(uniqueID,arg){var argum={error:false,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,headers:arg.headers,config:arg.config,request:arg.request};this.emit('response',argum);});this.authenticationclient.on('executed',function(uniqueID,arg){var argum={error:false,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.customclient.on('*',function(){this.emit.apply(self,arguments);});this.customclient.on('error',function(uniqueID,arg){var argum={error:true,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.customclient.on('requestError',function(uniqueID,arg){var argum={error:true,type:'request',uniqueID:uniqueID,baseURL:arg.baseURL,url:arg.url,data:arg.data,method:arg.method,params:arg.params,headers:arg.headers};this.emit('request',argum);});this.customclient.on('responseError',function(uniqueID,arg){var argum={error:true,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,request:arg.request};this.emit('response',argum);});this.customclient.on('responseAction',function(uniqueID,arg){var argum={error:false,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,headers:arg.headers,config:arg.config,request:arg.request};this.emit('response',argum);});this.customclient.on('executed',function(uniqueID,arg){var argum={error:false,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.patronclient.on('*',function(){this.emit.apply(self,arguments);});this.patronclient.on('error',function(uniqueID,arg){var argum={error:true,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.patronclient.on('requestError',function(uniqueID,arg){var argum={error:true,type:'request',uniqueID:uniqueID,baseURL:arg.baseURL,url:arg.url,data:arg.data,method:arg.method,params:arg.params,headers:arg.headers};this.emit('request',argum);});this.patronclient.on('responseError',function(uniqueID,arg){var argum={error:true,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,request:arg.request};this.emit('response',argum);});this.patronclient.on('responseAction',function(uniqueID,arg){var argum={error:false,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,headers:arg.headers,config:arg.config,request:arg.request};this.emit('response',argum);});this.patronclient.on('executed',function(uniqueID,arg){var argum={error:false,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.realtimedataclient.on('*',function(){this.emit.apply(self,arguments);});this.realtimedataclient.on('error',function(uniqueID,arg){var argum={error:true,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.realtimedataclient.on('requestError',function(uniqueID,arg){var argum={error:true,type:'request',uniqueID:uniqueID,baseURL:arg.baseURL,url:arg.url,data:arg.data,method:arg.method,params:arg.params,headers:arg.headers};this.emit('request',argum);});this.realtimedataclient.on('responseError',function(uniqueID,arg){var argum={error:true,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,request:arg.request};this.emit('response',argum);});this.realtimedataclient.on('responseAction',function(uniqueID,arg){var argum={error:false,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,headers:arg.headers,config:arg.config,request:arg.request};this.emit('response',argum);});this.realtimedataclient.on('executed',function(uniqueID,arg){var argum={error:false,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.reportingclient.on('*',function(){this.emit.apply(self,arguments);});this.reportingclient.on('error',function(uniqueID,arg){var argum={error:true,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});this.reportingclient.on('requestError',function(uniqueID,arg){var argum={error:true,type:'request',uniqueID:uniqueID,baseURL:arg.baseURL,url:arg.url,data:arg.data,method:arg.method,params:arg.params,headers:arg.headers};this.emit('request',argum);});this.reportingclient.on('responseError',function(uniqueID,arg){var argum={error:true,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,request:arg.request};this.emit('response',argum);});this.reportingclient.on('responseAction',function(uniqueID,arg){var argum={error:false,type:'response',uniqueID:uniqueID,data:arg.data,status:arg.status,statusText:arg.statusText,headers:arg.headers,config:arg.config,request:arg.request};this.emit('response',argum);});this.reportingclient.on('executed',function(uniqueID,arg){var argum={error:false,type:'general',uniqueID:uniqueID,message:arg};this.emit('general',argum);});}
on(arg0,arg1){}
getAdminClient(){return this.adminclient;}
getAgentClient(){return this.agentclient;}
getAuthenticationClient(){return this.authenticationclient;}
getCustomClient(){return this.customclient;}
getPatronClient(){return this.patronclient;}
getRealTimeDataClient(){return this.realtimedataclient;}
getReportingClient(){return this.reportingclient;}}
module.exports=LakeNiceClient;},{"../api/admin/adminclient":3,"../api/agent/agentclient":11,"../api/authentication/authenticationclient":23,"../api/custom/customclient":24,"../api/patron/patronclient":28,"../api/realtimedata/realtimedataclient":31,"../api/reporting/reportingclient":33,"mockconsole":62,"wildemitter":64}],36:[function(require,module,exports){module.exports=require('./lib/axios');},{"./lib/axios":38}],37:[function(require,module,exports){(function(process){'use strict';var utils=require('./../utils');var settle=require('./../core/settle');var buildURL=require('./../helpers/buildURL');var parseHeaders=require('./../helpers/parseHeaders');var isURLSameOrigin=require('./../helpers/isURLSameOrigin');var createError=require('../core/createError');var btoa=(typeof window!=='undefined'&&window.btoa&&window.btoa.bind(window))||require('./../helpers/btoa');module.exports=function xhrAdapter(config){return new Promise(function dispatchXhrRequest(resolve,reject){var requestData=config.data;var requestHeaders=config.headers;if(utils.isFormData(requestData)){delete requestHeaders['Content-Type'];}
var request=new XMLHttpRequest();var loadEvent='onreadystatechange';var xDomain=false;if(process.env.NODE_ENV!=='test'&&typeof window!=='undefined'&&window.XDomainRequest&&!('withCredentials'in request)&&!isURLSameOrigin(config.url)){request=new window.XDomainRequest();loadEvent='onload';xDomain=true;request.onprogress=function handleProgress(){};request.ontimeout=function handleTimeout(){};}
if(config.auth){var username=config.auth.username||'';var password=config.auth.password||'';requestHeaders.Authorization='Basic '+btoa(username+':'+password);}
request.open(config.method.toUpperCase(),buildURL(config.url,config.params,config.paramsSerializer),true);request.timeout=config.timeout;request[loadEvent]=function handleLoad(){if(!request||(request.readyState!==4&&!xDomain)){return;}
if(request.status===0&&!(request.responseURL&&request.responseURL.indexOf('file:')===0)){return;}
var responseHeaders='getAllResponseHeaders'in request?parseHeaders(request.getAllResponseHeaders()):null;var responseData=!config.responseType||config.responseType==='text'?request.responseText:request.response;var response={data:responseData,status:request.status===1223?204:request.status,statusText:request.status===1223?'No Content':request.statusText,headers:responseHeaders,config:config,request:request};settle(resolve,reject,response);request=null;};request.onerror=function handleError(){reject(createError('Network Error',config,null,request));request=null;};request.ontimeout=function handleTimeout(){reject(createError('timeout of '+config.timeout+'ms exceeded',config,'ECONNABORTED',request));request=null;};if(utils.isStandardBrowserEnv()){var cookies=require('./../helpers/cookies');var xsrfValue=(config.withCredentials||isURLSameOrigin(config.url))&&config.xsrfCookieName?cookies.read(config.xsrfCookieName):undefined;if(xsrfValue){requestHeaders[config.xsrfHeaderName]=xsrfValue;}}
if('setRequestHeader'in request){utils.forEach(requestHeaders,function setRequestHeader(val,key){if(typeof requestData==='undefined'&&key.toLowerCase()==='content-type'){delete requestHeaders[key];}else{request.setRequestHeader(key,val);}});}
if(config.withCredentials){request.withCredentials=true;}
if(config.responseType){try{request.responseType=config.responseType;}catch(e){if(config.responseType!=='json'){throw e;}}}
if(typeof config.onDownloadProgress==='function'){request.addEventListener('progress',config.onDownloadProgress);}
if(typeof config.onUploadProgress==='function'&&request.upload){request.upload.addEventListener('progress',config.onUploadProgress);}
if(config.cancelToken){config.cancelToken.promise.then(function onCanceled(cancel){if(!request){return;}
request.abort();reject(cancel);request=null;});}
if(requestData===undefined){requestData=null;}
request.send(requestData);});};}).call(this,require('_process'))},{"../core/createError":44,"./../core/settle":47,"./../helpers/btoa":51,"./../helpers/buildURL":52,"./../helpers/cookies":54,"./../helpers/isURLSameOrigin":56,"./../helpers/parseHeaders":58,"./../utils":60,"_process":63}],38:[function(require,module,exports){'use strict';var utils=require('./utils');var bind=require('./helpers/bind');var Axios=require('./core/Axios');var defaults=require('./defaults');function createInstance(defaultConfig){var context=new Axios(defaultConfig);var instance=bind(Axios.prototype.request,context);utils.extend(instance,Axios.prototype,context);utils.extend(instance,context);return instance;}
var axios=createInstance(defaults);axios.Axios=Axios;axios.create=function create(instanceConfig){return createInstance(utils.merge(defaults,instanceConfig));};axios.Cancel=require('./cancel/Cancel');axios.CancelToken=require('./cancel/CancelToken');axios.isCancel=require('./cancel/isCancel');axios.all=function all(promises){return Promise.all(promises);};axios.spread=require('./helpers/spread');module.exports=axios;module.exports.default=axios;},{"./cancel/Cancel":39,"./cancel/CancelToken":40,"./cancel/isCancel":41,"./core/Axios":42,"./defaults":49,"./helpers/bind":50,"./helpers/spread":59,"./utils":60}],39:[function(require,module,exports){'use strict';function Cancel(message){this.message=message;}
Cancel.prototype.toString=function toString(){return'Cancel'+(this.message?': '+this.message:'');};Cancel.prototype.__CANCEL__=true;module.exports=Cancel;},{}],40:[function(require,module,exports){'use strict';var Cancel=require('./Cancel');function CancelToken(executor){if(typeof executor!=='function'){throw new TypeError('executor must be a function.');}
var resolvePromise;this.promise=new Promise(function promiseExecutor(resolve){resolvePromise=resolve;});var token=this;executor(function cancel(message){if(token.reason){return;}
token.reason=new Cancel(message);resolvePromise(token.reason);});}
CancelToken.prototype.throwIfRequested=function throwIfRequested(){if(this.reason){throw this.reason;}};CancelToken.source=function source(){var cancel;var token=new CancelToken(function executor(c){cancel=c;});return{token:token,cancel:cancel};};module.exports=CancelToken;},{"./Cancel":39}],41:[function(require,module,exports){'use strict';module.exports=function isCancel(value){return!!(value&&value.__CANCEL__);};},{}],42:[function(require,module,exports){'use strict';var defaults=require('./../defaults');var utils=require('./../utils');var InterceptorManager=require('./InterceptorManager');var dispatchRequest=require('./dispatchRequest');function Axios(instanceConfig){this.defaults=instanceConfig;this.interceptors={request:new InterceptorManager(),response:new InterceptorManager()};}
Axios.prototype.request=function request(config){if(typeof config==='string'){config=utils.merge({url:arguments[0]},arguments[1]);}
config=utils.merge(defaults,{method:'get'},this.defaults,config);config.method=config.method.toLowerCase();var chain=[dispatchRequest,undefined];var promise=Promise.resolve(config);this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor){chain.unshift(interceptor.fulfilled,interceptor.rejected);});this.interceptors.response.forEach(function pushResponseInterceptors(interceptor){chain.push(interceptor.fulfilled,interceptor.rejected);});while(chain.length){promise=promise.then(chain.shift(),chain.shift());}
return promise;};utils.forEach(['delete','get','head','options'],function forEachMethodNoData(method){Axios.prototype[method]=function(url,config){return this.request(utils.merge(config||{},{method:method,url:url}));};});utils.forEach(['post','put','patch'],function forEachMethodWithData(method){Axios.prototype[method]=function(url,data,config){return this.request(utils.merge(config||{},{method:method,url:url,data:data}));};});module.exports=Axios;},{"./../defaults":49,"./../utils":60,"./InterceptorManager":43,"./dispatchRequest":45}],43:[function(require,module,exports){'use strict';var utils=require('./../utils');function InterceptorManager(){this.handlers=[];}
InterceptorManager.prototype.use=function use(fulfilled,rejected){this.handlers.push({fulfilled:fulfilled,rejected:rejected});return this.handlers.length-1;};InterceptorManager.prototype.eject=function eject(id){if(this.handlers[id]){this.handlers[id]=null;}};InterceptorManager.prototype.forEach=function forEach(fn){utils.forEach(this.handlers,function forEachHandler(h){if(h!==null){fn(h);}});};module.exports=InterceptorManager;},{"./../utils":60}],44:[function(require,module,exports){'use strict';var enhanceError=require('./enhanceError');module.exports=function createError(message,config,code,request,response){var error=new Error(message);return enhanceError(error,config,code,request,response);};},{"./enhanceError":46}],45:[function(require,module,exports){'use strict';var utils=require('./../utils');var transformData=require('./transformData');var isCancel=require('../cancel/isCancel');var defaults=require('../defaults');var isAbsoluteURL=require('./../helpers/isAbsoluteURL');var combineURLs=require('./../helpers/combineURLs');function throwIfCancellationRequested(config){if(config.cancelToken){config.cancelToken.throwIfRequested();}}
module.exports=function dispatchRequest(config){throwIfCancellationRequested(config);if(config.baseURL&&!isAbsoluteURL(config.url)){config.url=combineURLs(config.baseURL,config.url);}
config.headers=config.headers||{};config.data=transformData(config.data,config.headers,config.transformRequest);config.headers=utils.merge(config.headers.common||{},config.headers[config.method]||{},config.headers||{});utils.forEach(['delete','get','head','post','put','patch','common'],function cleanHeaderConfig(method){delete config.headers[method];});var adapter=config.adapter||defaults.adapter;return adapter(config).then(function onAdapterResolution(response){throwIfCancellationRequested(config);response.data=transformData(response.data,response.headers,config.transformResponse);return response;},function onAdapterRejection(reason){if(!isCancel(reason)){throwIfCancellationRequested(config);if(reason&&reason.response){reason.response.data=transformData(reason.response.data,reason.response.headers,config.transformResponse);}}
return Promise.reject(reason);});};},{"../cancel/isCancel":41,"../defaults":49,"./../helpers/combineURLs":53,"./../helpers/isAbsoluteURL":55,"./../utils":60,"./transformData":48}],46:[function(require,module,exports){'use strict';module.exports=function enhanceError(error,config,code,request,response){error.config=config;if(code){error.code=code;}
error.request=request;error.response=response;return error;};},{}],47:[function(require,module,exports){'use strict';var createError=require('./createError');module.exports=function settle(resolve,reject,response){var validateStatus=response.config.validateStatus;if(!response.status||!validateStatus||validateStatus(response.status)){resolve(response);}else{reject(createError('Request failed with status code '+response.status,response.config,null,response.request,response));}};},{"./createError":44}],48:[function(require,module,exports){'use strict';var utils=require('./../utils');module.exports=function transformData(data,headers,fns){utils.forEach(fns,function transform(fn){data=fn(data,headers);});return data;};},{"./../utils":60}],49:[function(require,module,exports){(function(process){'use strict';var utils=require('./utils');var normalizeHeaderName=require('./helpers/normalizeHeaderName');var DEFAULT_CONTENT_TYPE={'Content-Type':'application/x-www-form-urlencoded'};function setContentTypeIfUnset(headers,value){if(!utils.isUndefined(headers)&&utils.isUndefined(headers['Content-Type'])){headers['Content-Type']=value;}}
function getDefaultAdapter(){var adapter;if(typeof XMLHttpRequest!=='undefined'){adapter=require('./adapters/xhr');}else if(typeof process!=='undefined'){adapter=require('./adapters/http');}
return adapter;}
var defaults={adapter:getDefaultAdapter(),transformRequest:[function transformRequest(data,headers){normalizeHeaderName(headers,'Content-Type');if(utils.isFormData(data)||utils.isArrayBuffer(data)||utils.isBuffer(data)||utils.isStream(data)||utils.isFile(data)||utils.isBlob(data)){return data;}
if(utils.isArrayBufferView(data)){return data.buffer;}
if(utils.isURLSearchParams(data)){setContentTypeIfUnset(headers,'application/x-www-form-urlencoded;charset=utf-8');return data.toString();}
if(utils.isObject(data)){setContentTypeIfUnset(headers,'application/json;charset=utf-8');return JSON.stringify(data);}
return data;}],transformResponse:[function transformResponse(data){if(typeof data==='string'){try{data=JSON.parse(data);}catch(e){}}
return data;}],timeout:0,xsrfCookieName:'XSRF-TOKEN',xsrfHeaderName:'X-XSRF-TOKEN',maxContentLength:-1,validateStatus:function validateStatus(status){return status>=200&&status<300;}};defaults.headers={common:{'Accept':'application/json, text/plain, */*'}};utils.forEach(['delete','get','head'],function forEachMethodNoData(method){defaults.headers[method]={};});utils.forEach(['post','put','patch'],function forEachMethodWithData(method){defaults.headers[method]=utils.merge(DEFAULT_CONTENT_TYPE);});module.exports=defaults;}).call(this,require('_process'))},{"./adapters/http":37,"./adapters/xhr":37,"./helpers/normalizeHeaderName":57,"./utils":60,"_process":63}],50:[function(require,module,exports){'use strict';module.exports=function bind(fn,thisArg){return function wrap(){var args=new Array(arguments.length);for(var i=0;i<args.length;i++){args[i]=arguments[i];}
return fn.apply(thisArg,args);};};},{}],51:[function(require,module,exports){'use strict';var chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';function E(){this.message='String contains an invalid character';}
E.prototype=new Error;E.prototype.code=5;E.prototype.name='InvalidCharacterError';function btoa(input){var str=String(input);var output='';for(var block,charCode,idx=0,map=chars;str.charAt(idx|0)||(map='=',idx%1);output+=map.charAt(63&block>>8-idx%1*8)){charCode=str.charCodeAt(idx+=3/4);if(charCode>0xFF){throw new E();}
block=block<<8|charCode;}
return output;}
module.exports=btoa;},{}],52:[function(require,module,exports){'use strict';var utils=require('./../utils');function encode(val){return encodeURIComponent(val).replace(/%40/gi,'@').replace(/%3A/gi,':').replace(/%24/g,'$').replace(/%2C/gi,',').replace(/%20/g,'+').replace(/%5B/gi,'[').replace(/%5D/gi,']');}
module.exports=function buildURL(url,params,paramsSerializer){if(!params){return url;}
var serializedParams;if(paramsSerializer){serializedParams=paramsSerializer(params);}else if(utils.isURLSearchParams(params)){serializedParams=params.toString();}else{var parts=[];utils.forEach(params,function serialize(val,key){if(val===null||typeof val==='undefined'){return;}
if(utils.isArray(val)){key=key+'[]';}else{val=[val];}
utils.forEach(val,function parseValue(v){if(utils.isDate(v)){v=v.toISOString();}else if(utils.isObject(v)){v=JSON.stringify(v);}
parts.push(encode(key)+'='+encode(v));});});serializedParams=parts.join('&');}
if(serializedParams){url+=(url.indexOf('?')===-1?'?':'&')+serializedParams;}
return url;};},{"./../utils":60}],53:[function(require,module,exports){'use strict';module.exports=function combineURLs(baseURL,relativeURL){return relativeURL?baseURL.replace(/\/+$/,'')+'/'+relativeURL.replace(/^\/+/,''):baseURL;};},{}],54:[function(require,module,exports){'use strict';var utils=require('./../utils');module.exports=(utils.isStandardBrowserEnv()?(function standardBrowserEnv(){return{write:function write(name,value,expires,path,domain,secure){var cookie=[];cookie.push(name+'='+encodeURIComponent(value));if(utils.isNumber(expires)){cookie.push('expires='+new Date(expires).toGMTString());}
if(utils.isString(path)){cookie.push('path='+path);}
if(utils.isString(domain)){cookie.push('domain='+domain);}
if(secure===true){cookie.push('secure');}
document.cookie=cookie.join('; ');},read:function read(name){var match=document.cookie.match(new RegExp('(^|;\\s*)('+name+')=([^;]*)'));return(match?decodeURIComponent(match[3]):null);},remove:function remove(name){this.write(name,'',Date.now()-86400000);}};})():(function nonStandardBrowserEnv(){return{write:function write(){},read:function read(){return null;},remove:function remove(){}};})());},{"./../utils":60}],55:[function(require,module,exports){'use strict';module.exports=function isAbsoluteURL(url){return/^([a-z][a-z\d\+\-\.]*:)?\/\};},{}],56:[function(require,module,exports){'use strict';var utils=require('./../utils');module.exports=(utils.isStandardBrowserEnv()?(function standardBrowserEnv(){var msie=/(msie|trident)/i.test(navigator.userAgent);var urlParsingNode=document.createElement('a');var originURL;function resolveURL(url){var href=url;if(msie){urlParsingNode.setAttribute('href',href);href=urlParsingNode.href;}
urlParsingNode.setAttribute('href',href);return{href:urlParsingNode.href,protocol:urlParsingNode.protocol?urlParsingNode.protocol.replace(/:$/,''):'',host:urlParsingNode.host,search:urlParsingNode.search?urlParsingNode.search.replace(/^\?/,''):'',hash:urlParsingNode.hash?urlParsingNode.hash.replace(/^#/,''):'',hostname:urlParsingNode.hostname,port:urlParsingNode.port,pathname:(urlParsingNode.pathname.charAt(0)==='/')?urlParsingNode.pathname:'/'+urlParsingNode.pathname};}
originURL=resolveURL(window.location.href);return function isURLSameOrigin(requestURL){var parsed=(utils.isString(requestURL))?resolveURL(requestURL):requestURL;return(parsed.protocol===originURL.protocol&&parsed.host===originURL.host);};})():(function nonStandardBrowserEnv(){return function isURLSameOrigin(){return true;};})());},{"./../utils":60}],57:[function(require,module,exports){'use strict';var utils=require('../utils');module.exports=function normalizeHeaderName(headers,normalizedName){utils.forEach(headers,function processHeader(value,name){if(name!==normalizedName&&name.toUpperCase()===normalizedName.toUpperCase()){headers[normalizedName]=value;delete headers[name];}});};},{"../utils":60}],58:[function(require,module,exports){'use strict';var utils=require('./../utils');var ignoreDuplicateOf=['age','authorization','content-length','content-type','etag','expires','from','host','if-modified-since','if-unmodified-since','last-modified','location','max-forwards','proxy-authorization','referer','retry-after','user-agent'];module.exports=function parseHeaders(headers){var parsed={};var key;var val;var i;if(!headers){return parsed;}
utils.forEach(headers.split('\n'),function parser(line){i=line.indexOf(':');key=utils.trim(line.substr(0,i)).toLowerCase();val=utils.trim(line.substr(i+1));if(key){if(parsed[key]&&ignoreDuplicateOf.indexOf(key)>=0){return;}
if(key==='set-cookie'){parsed[key]=(parsed[key]?parsed[key]:[]).concat([val]);}else{parsed[key]=parsed[key]?parsed[key]+', '+val:val;}}});return parsed;};},{"./../utils":60}],59:[function(require,module,exports){'use strict';module.exports=function spread(callback){return function wrap(arr){return callback.apply(null,arr);};};},{}],60:[function(require,module,exports){'use strict';var bind=require('./helpers/bind');var isBuffer=require('is-buffer');var toString=Object.prototype.toString;function isArray(val){return toString.call(val)==='[object Array]';}
function isArrayBuffer(val){return toString.call(val)==='[object ArrayBuffer]';}
function isFormData(val){return(typeof FormData!=='undefined')&&(val instanceof FormData);}
function isArrayBufferView(val){var result;if((typeof ArrayBuffer!=='undefined')&&(ArrayBuffer.isView)){result=ArrayBuffer.isView(val);}else{result=(val)&&(val.buffer)&&(val.buffer instanceof ArrayBuffer);}
return result;}
function isString(val){return typeof val==='string';}
function isNumber(val){return typeof val==='number';}
function isUndefined(val){return typeof val==='undefined';}
function isObject(val){return val!==null&&typeof val==='object';}
function isDate(val){return toString.call(val)==='[object Date]';}
function isFile(val){return toString.call(val)==='[object File]';}
function isBlob(val){return toString.call(val)==='[object Blob]';}
function isFunction(val){return toString.call(val)==='[object Function]';}
function isStream(val){return isObject(val)&&isFunction(val.pipe);}
function isURLSearchParams(val){return typeof URLSearchParams!=='undefined'&&val instanceof URLSearchParams;}
function trim(str){return str.replace(/^\s*/,'').replace(/\s*$/,'');}
function isStandardBrowserEnv(){if(typeof navigator!=='undefined'&&navigator.product==='ReactNative'){return false;}
return(typeof window!=='undefined'&&typeof document!=='undefined');}
function forEach(obj,fn){if(obj===null||typeof obj==='undefined'){return;}
if(typeof obj!=='object'){obj=[obj];}
if(isArray(obj)){for(var i=0,l=obj.length;i<l;i++){fn.call(null,obj[i],i,obj);}}else{for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){fn.call(null,obj[key],key,obj);}}}}
function merge(){var result={};function assignValue(val,key){if(typeof result[key]==='object'&&typeof val==='object'){result[key]=merge(result[key],val);}else{result[key]=val;}}
for(var i=0,l=arguments.length;i<l;i++){forEach(arguments[i],assignValue);}
return result;}
function extend(a,b,thisArg){forEach(b,function assignValue(val,key){if(thisArg&&typeof val==='function'){a[key]=bind(val,thisArg);}else{a[key]=val;}});return a;}
module.exports={isArray:isArray,isArrayBuffer:isArrayBuffer,isBuffer:isBuffer,isFormData:isFormData,isArrayBufferView:isArrayBufferView,isString:isString,isNumber:isNumber,isObject:isObject,isUndefined:isUndefined,isDate:isDate,isFile:isFile,isBlob:isBlob,isFunction:isFunction,isStream:isStream,isURLSearchParams:isURLSearchParams,isStandardBrowserEnv:isStandardBrowserEnv,forEach:forEach,merge:merge,extend:extend,trim:trim};},{"./helpers/bind":50,"is-buffer":61}],61:[function(require,module,exports){module.exports=function(obj){return obj!=null&&(isBuffer(obj)||isSlowBuffer(obj)||!!obj._isBuffer)}
function isBuffer(obj){return!!obj.constructor&&typeof obj.constructor.isBuffer==='function'&&obj.constructor.isBuffer(obj)}
function isSlowBuffer(obj){return typeof obj.readFloatLE==='function'&&typeof obj.slice==='function'&&isBuffer(obj.slice(0,0))}},{}],62:[function(require,module,exports){var methods="assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn".split(",");var l=methods.length;var fn=function(){};var mockconsole={};while(l--){mockconsole[methods[l]]=fn;}
module.exports=mockconsole;},{}],63:[function(require,module,exports){var process=module.exports={};var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}
function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}
(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}
try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}}())
function runTimeout(fun){if(cachedSetTimeout===setTimeout){return setTimeout(fun,0);}
if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}
try{return cachedSetTimeout(fun,0);}catch(e){try{return cachedSetTimeout.call(null,fun,0);}catch(e){return cachedSetTimeout.call(this,fun,0);}}}
function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){return clearTimeout(marker);}
if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}
try{return cachedClearTimeout(marker);}catch(e){try{return cachedClearTimeout.call(null,marker);}catch(e){return cachedClearTimeout.call(this,marker);}}}
var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}
draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}
if(queue.length){drainQueue();}}
function drainQueue(){if(draining){return;}
var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}
queueIndex=-1;len=queue.length;}
currentQueue=null;draining=false;runClearTimeout(timeout);}
process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}
queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};function Item(fun,array){this.fun=fun;this.array=array;}
Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';process.versions={};function noop(){}
process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[]}
process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return'/'};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return 0;};},{}],64:[function(require,module,exports){module.exports=WildEmitter;function WildEmitter(){}
WildEmitter.mixin=function(constructor){var prototype=constructor.prototype||constructor;prototype.isWildEmitter=true;prototype.on=function(event,groupName,fn){this.callbacks=this.callbacks||{};var hasGroup=(arguments.length===3),group=hasGroup?arguments[1]:undefined,func=hasGroup?arguments[2]:arguments[1];func._groupName=group;(this.callbacks[event]=this.callbacks[event]||[]).push(func);return this;};prototype.once=function(event,groupName,fn){var self=this,hasGroup=(arguments.length===3),group=hasGroup?arguments[1]:undefined,func=hasGroup?arguments[2]:arguments[1];function on(){self.off(event,on);func.apply(this,arguments);}
this.on(event,group,on);return this;};prototype.releaseGroup=function(groupName){this.callbacks=this.callbacks||{};var item,i,len,handlers;for(item in this.callbacks){handlers=this.callbacks[item];for(i=0,len=handlers.length;i<len;i++){if(handlers[i]._groupName===groupName){handlers.splice(i,1);i--;len--;}}}
return this;};prototype.off=function(event,fn){this.callbacks=this.callbacks||{};var callbacks=this.callbacks[event],i;if(!callbacks)return this;if(arguments.length===1){delete this.callbacks[event];return this;}
i=callbacks.indexOf(fn);callbacks.splice(i,1);if(callbacks.length===0){delete this.callbacks[event];}
return this;};prototype.emit=function(event){this.callbacks=this.callbacks||{};var args=[].slice.call(arguments,1),callbacks=this.callbacks[event],specialCallbacks=this.getWildcardCallbacks(event),i,len,item,listeners;if(callbacks){listeners=callbacks.slice();for(i=0,len=listeners.length;i<len;++i){if(!listeners[i]){break;}
listeners[i].apply(this,args);}}
if(specialCallbacks){len=specialCallbacks.length;listeners=specialCallbacks.slice();for(i=0,len=listeners.length;i<len;++i){if(!listeners[i]){break;}
listeners[i].apply(this,[event].concat(args));}}
return this;};prototype.getWildcardCallbacks=function(eventName){this.callbacks=this.callbacks||{};var item,split,result=[];for(item in this.callbacks){split=item.split('*');if(item==='*'||(split.length===2&&eventName.slice(0,split[0].length)===split[0])){result=result.concat(this.callbacks[item]);}}
return result;};};WildEmitter.mixin(WildEmitter);},{}]},{},[35])(35)});